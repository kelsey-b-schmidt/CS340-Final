{"version":3,"sources":["Components/Header-Footer/HeaderComponent.js","Pages/Home.js","Components/Customers/CustomerRowComponent.js","Components/Customers/CustomerTableComponent.js","Components/Customers/CustomerBrowseComponent.js","Pages/Customers/Customers.js","Components/Addresses/AddressRowComponent.js","Components/Addresses/AddressTableComponent.js","Components/Addresses/AddressBrowseComponent.js","Pages/Addresses/Addresses.js","Components/Orders/OrderRowComponent.js","Components/Orders/OrderTableComponent.js","Components/Orders/OrderBrowseComponent.js","Pages/Orders/Orders.js","Components/Products/ProductRowComponent.js","Components/Products/ProductTableComponent.js","Components/Products/ProductBrowseComponent.js","Pages/Products/Products.js","Pages/Products/ProductsAdd.js","Pages/Products/ProductsUpdate.js","Components/Header-Footer/FooterComponent.js","Pages/Addresses/AddressesAdd.js","Pages/Addresses/AddressesUpdate.js","Pages/Customers/CustomersAdd.js","Pages/Customers/CustomersUpdate.js","Pages/Orders/OrdersAdd.js","Components/OrderDetails/OrderDetailsRowComponent.js","Components/OrderDetails/OrderDetailsTableComponent.js","Components/OrderDetails/OrderDetailsBrowseComponent.js","Pages/OrderDetails/OrderDetails.js","Pages/OrderDetails/OrderDetailsAdd.js","Pages/OrderDetails/OrderDetailsUpdate.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderComponent","react_default","a","createElement","class","react_router_dom","to","Home","CustomerRowComponent","_ref","customer","setCustomerToEdit","navigate","useNavigate","customerID","customerName","email","phoneNumber","type","value","onClick","deleteCustomer","_ref2","Object","asyncToGenerator","_regeneratorRuntime","mark","_callee","newCustomerValues","response","wrap","_context","prev","next","action","fetch","method","body","JSON","stringify","headers","Content-Type","sent","json","request_received","alert","window","location","reload","stop","apply","this","arguments","confirm","catch","console","error","CustomerTableComponent","customers","colSpan","map","i","key","CustomerBrowseComponent","_useState","useState","_useState2","slicedToArray","setCustomers","useEffect","CustomerBrowseComponent_regeneratorRuntime","responseJson","getResponse","Customers","AddressRowComponent","address","setAddressToEdit","addressID","handleBoolean","input","disabled","checked","recipient","street","city","state","zip","isActive","isPrimary","deleteAddress","AddressRowComponent_regeneratorRuntime","newAddressValues","AddressTableComponent","addresses","AddressBrowseComponent","setAddresses","AddressBrowseComponent_regeneratorRuntime","Addresses","OrderRowComponent","order","setOrderToEdit","orderID","newDate","Date","toLocaleDateString","time","toLocaleTimeString","combinedDateTime","concat","handleDateTime","log","shipDateTime","deleteOrders","OrderRowComponent_regeneratorRuntime","newOrderValues","OrderTableComponent","orders","OrderBrowseComponent","setOrders","OrderBrowseComponent_regeneratorRuntime","Orders","ProductRowComponent","product","setProductToEdit","productID","productName","description","brand","weightVal","weightUnit","sellPrice","replenishCost","numberInStock","deleteProduct","ProductRowComponent_regeneratorRuntime","newProductValues","ProductTableComponent","products","ProductBrowseComponent","setProducts","ProductBrowseComponent_regeneratorRuntime","Products","setProductName","_useState3","_useState4","setDescription","_useState5","_useState6","setBrand","_useState7","_useState8","setWeightVal","_useState9","_useState10","setWeightUnit","_useState11","_useState12","setSellPrice","_useState13","_useState14","setReplenishCost","_useState15","_useState16","setNumberInStock","id","maxLength","onChange","e","target","step","min","max","title","Math","selected","hidden","newProduct","ProductsAdd_regeneratorRuntime","productToEdit","productNameUpdate","setProductNameUpdate","descriptionUpdate","setDescriptionUpdate","brandUpdate","setBrandUpdate","weightValUpdate","setWeightValUpdate","weightUnitUpdate","setWeightUnitUpdate","sellPriceUpdate","setSellPriceUpdate","replenishCostUpdate","setReplenishCostUpdate","numberInStockUpdate","setNumberInStockUpdate","ProductsUpdate_regeneratorRuntime","FooterComponent","Address","setRecipientName","setStreet","setCity","setState","setZip","setIsActive","setIsPrimary","replace","handleActiveChange","handlePrimaryChange","newAddress","AddressesAdd_regeneratorRuntime","addressToEdit","recipientUpdate","setRecipientNameUpdate","streetUpdate","setStreetUpdate","cityUpdate","setCityUpdate","stateUpdate","setStateUpdate","zipUpdate","setZipUpdate","isActiveUpdate","setIsActiveUpdate","isPrimaryUpdate","setIsPrimaryUpdate","AddressesUpdate_regeneratorRuntime","setCustomerName","setEmail","setPhoneNumber","placeholder","Number","correctInput","validatePhoneNumber","newCustomer","CustomersAdd_regeneratorRuntime","customerToEdit","customerNameUpdate","setCustomerNameUpdate","emailUpdate","setEmailUpdate","phoneNumberUpdate","setPhoneNumberUpdate","CustomersUpdate_regeneratorRuntime","setAddressID","setCustomerID","setShipDateTime","newOrder","OrdersAdd_regeneratorRuntime","OrderDetailsRowComponent","orderDetails","setOrderDetailsToEdit","odID","productQuantity","unitPrice","lineTotal","deleteOrderDetails","OrderDetailsRowComponent_regeneratorRuntime","newOrderDetailValues","OrderDetailsTableComponent","OrderDetailsBrowseComponent","setOrderDetails","OrderDetailsBrowseComponent_regeneratorRuntime","OrderDetails","setOrderID","setProductID","setProductQuantity","setUnitPrice","newOrderDetail","OrderDetailsAdd_regeneratorRuntime","orderDetailsToEdit","orderIDUpdate","setOrderIDUpdate","productIDUpdate","setProductIDUpdate","productQuantityUpdate","setProductQuantityUpdate","unitPriceUpdate","setUnitPriceUpdate","OrderDetailsUpdate_regeneratorRuntime","App","orderToEdit","react_router","path","element","CustomersAdd_Customers","CustomersUpdate_Customers","AddressesUpdate_Address","OrdersAdd_Orders","ProductsAdd_Products","ProductsUpdate_Products","OrderDetailsAdd_OrderDetails","OrderDetailsUpdate_OrderDetails","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App_App"],"mappings":"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","file":"static/js/main.ceba2f16.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\n\nexport default function HeaderComponent () {\n\n    return (\n        <div>\n            <h1>CoffeeBuzz Database System</h1>\n            <ul class=\"navigation\">\n                <li><Link to=\"/\">Home</Link></li>\n                <li><Link to=\"/Customers\">Customers</Link></li>\n                <li><Link to=\"/Addresses\">Addresses</Link></li>\n                <li><Link to=\"/Orders\">Orders</Link></li>\n                <li><Link to=\"/Products\">Products</Link></li>\n            </ul>\n        </div>\n    )\n}","import React from 'react'\n\nexport default function Home() {\n\n\n    return (\n        <div>\n            <h2>Home</h2>\n            <h3>Welcome to the CoffeeBuzz Database System</h3>\n            <p>Please use the links above to view, create, edit, or delete entries from the corresponding databases.</p>\n        </div>\n    )\n}","import React from 'react'\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function CustomerRowComponent(\n    { customer, setCustomerToEdit }) {\n\n    const navigate = useNavigate()\n\n    const customerID = customer.customerID\n\n    const seeAddresses = () => {\n        navigate(\"/Addresses\")\n    }\n\n    const seeOrders = () => {\n        navigate(\"/Orders\")\n    }\n\n    const onUpdate = () => {\n        setCustomerToEdit(customer)\n        navigate(\"/CustomersUpdate\")\n    }\n\n    const onDelete = () => {\n        const deleteCustomer = async () => {\n            const action = \"Delete\"\n\n            const newCustomerValues = {\n                action, customerID\n            }\n            const response = await fetch('/api/Customers', {\n                method: 'POST',\n                body: JSON.stringify(newCustomerValues),\n                headers: { 'Content-Type': 'application/json' },\n            })\n            const responseJson = await response.json()\n            if (responseJson.request_received === \"success\") {\n                alert(\"Successfully deleted the Customer!\\nThe page will now refresh.\")\n                window.location.reload()\n            } else {\n                alert(\"Failed to delete Customer, please try again!\")\n            }\n        }\n        const answer = window.confirm(\"This will delete the selected Customer.\\nDo you wish to proceed?\")\n        if (answer) {\n            deleteCustomer()\n                .catch(console.error)\n        }\n    }\n\n    return (\n        <tr>\n            <td>{customer.customerID}</td>\n            <td>{customer.customerName}</td>\n            <td>{customer.email}</td>\n            <td>{customer.phoneNumber}</td>\n            <td>\n                <input type=\"button\" value=\"Update\" onClick={onUpdate} />\n            </td>\n            <td>\n            <input type=\"button\" value=\"Delete\"\n                       onClick={onDelete}/>\n            </td>\n            <td>\n                <input type=\"button\" value=\"See Addresses\" onClick={seeAddresses} />\n            </td>\n            <td>\n                <input type=\"button\" value=\"See Orders\" onClick={seeOrders} />\n            </td>\n        </tr>\n    )\n}\n","import React from 'react'\nimport CustomerRowComponent from \"./CustomerRowComponent\";\n\nexport default function CustomerTableComponent(\n    {customers, setCustomerToEdit}) {\n    return (\n        <table>\n            <thead>\n            <tr>\n                <th>Customer ID</th>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Phone Number</th>\n                <th colSpan=\"4\">Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {customers.map((customer, i) =>\n                    <CustomerRowComponent\n                        customer={customer}\n                        key={i}\n                        setCustomerToEdit={setCustomerToEdit}\n                    />)}\n            </tbody>\n        </table>\n    )\n}\n","import React from 'react'\nimport CustomerTableComponent from \"./CustomerTableComponent\";\nimport {useEffect, useState} from \"react\";\n\nexport default function CustomerBrowseComponent({setCustomerToEdit}) {\n\n    const [customers, setCustomers] = useState([])\n\n    useEffect(() => {\n        const getResponse = async() => {\n            const response = await fetch(\"/api/Customers\")\n            const responseJson = await response.json()\n            setCustomers(responseJson)\n        }\n        getResponse()\n            .catch(console.error)\n    }, [])\n\n    return (\n        <fieldset>\n            <legend><strong>Browse Customers</strong></legend>\n            <CustomerTableComponent\n                customers={customers}\n                setCustomerToEdit={setCustomerToEdit}\n            />\n        </fieldset>\n    )\n}","import React from 'react'\nimport { Link } from \"react-router-dom\";\nimport CustomerBrowseComponent from \"../../Components/Customers/CustomerBrowseComponent\";\n//import CustomerSearchComponent from \"../Components/CustomerSearchComponent\";\n\nexport default function Customers({ setCustomerToEdit }) {\n\n    return (\n        <div>\n            <h2>Customers</h2>\n            <Link to='/CustomersAdd'><button>Add a new Customer</button></Link>\n            <br />\n            <br />\n            <CustomerBrowseComponent\n                setCustomerToEdit={setCustomerToEdit} />\n        </div>\n    )\n}\n\n//<CustomerSearchComponent/>\n","import React from 'react'\nimport {useState} from \"react\";\nimport {useNavigate} from \"react-router-dom\";\n\nexport default function AddressRowComponent(\n    {address, setAddressToEdit}) {\n\n    const navigate = useNavigate()\n\n    const addressID = address.addressID\n\n    const onUpdate = () => {\n        setAddressToEdit(address)\n        navigate(\"/AddressesUpdate\")\n    }\n\n    const onDelete = () => {\n        const deleteAddress = async () => {\n            const action = \"Delete\"\n\n            const newAddressValues = {\n                action, addressID\n            }\n            const response = await fetch('/api/Addresses', {\n                method: 'POST',\n                body: JSON.stringify(newAddressValues),\n                headers: {'Content-Type': 'application/json'},\n            })\n            const responseJson = await response.json()\n            if (responseJson.request_received === \"success\") {\n                alert(\"Successfully deleted the Address!\\nThe page will now refresh.\")\n                window.location.reload()\n            } else {\n                alert(\"Failed to delete Address, please try again!\")\n            }\n        }\n        const answer = window.confirm(\"This will delete the selected Address.\\nDo you wish to proceed?\")\n        if (answer) {\n            deleteAddress()\n                .catch(console.error)\n        } \n    }\n\n    const handleBoolean = (input) => {\n        if(input === 0) {\n            return <input type=\"checkbox\" disabled/>\n        }\n        else if (input ===1) {\n            return <input type=\"checkbox\" checked disabled/>\n        }\n    }\n\n    return (\n        <tr>\n            <td>{address.addressID}</td>\n            <td>{address.customerID}</td>\n            <td>{address.recipient}</td>\n            <td>{address.street}</td>\n            <td>{address.city}</td>\n            <td>{address.state}</td>\n            <td>{address.zip}</td>\n            <td>{handleBoolean(address.isActive)}</td>\n            <td>{handleBoolean(address.isPrimary)}</td>\n            <td>\n                <input type=\"button\" value=\"Update\" onClick={onUpdate}/>\n            </td>\n            <td>\n                <input type=\"button\" value=\"Delete\"\n                       onClick={onDelete}\n                />\n            </td>\n        </tr>\n    )\n}\n","import React from 'react'\nimport AddressRowComponent from \"./AddressRowComponent\";\n\nexport default function AddressTableComponent(\n    { addresses, setAddressToEdit }) {\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>Address ID</th>\n                    <th>Customer ID</th>\n                    <th>Recipient</th>\n                    <th colSpan=\"4\">Address</th>\n                    <th>Primary</th>\n                    <th>Active</th>\n                    <th colSpan=\"2\">Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {addresses.map((address, i) =>\n                    <AddressRowComponent\n                        address={address}\n                        key={i}\n                        setAddressToEdit={setAddressToEdit}\n                    />)}\n            </tbody>\n        </table>\n    )\n}\n","import React from 'react'\nimport { useEffect, useState } from \"react\";\nimport AddressTableComponent from \"./AddressTableComponent\";\n\nexport default function AddressBrowseComponent({ setAddressToEdit }) {\n\n    const [addresses, setAddresses] = useState([])\n\n    useEffect(() => {\n        const getResponse = async () => {\n            const response = await fetch(\"/api/Addresses\")\n            const responseJson = await response.json()\n            setAddresses(responseJson)\n        }\n        getResponse()\n            .catch(console.error)\n    }, [])\n\n    return (\n        <fieldset>\n            <legend><strong>Browse Addresses</strong></legend>\n            <AddressTableComponent\n                addresses={addresses}\n                setAddressToEdit={setAddressToEdit}\n            />\n        </fieldset>\n    )\n}","import React from 'react'\nimport { Link } from \"react-router-dom\";\nimport AddressBrowseComponent from \"../../Components/Addresses/AddressBrowseComponent\";\n//import AddressSearchComponent from \"../Components/AddressSearchComponent\";\n\nexport default function Addresses({ setAddressToEdit }) {\n\n    return (\n        <div>\n            <h2>Addresses</h2>\n            <Link to=\"/AddressesAdd\"><button>Add a new Address</button></Link>\n            <br />\n            <br />\n            <AddressBrowseComponent\n                setAddressToEdit={setAddressToEdit} />\n        </div>\n    )\n}\n\n//<AddressSearchComponent/>\n//<Link to=\"/AddressesAdd\"><button>Add a new Address</button></Link> (link inside button, when finished)","import React from 'react'\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function OrderRowComponent(\n    { order, setOrderToEdit }) {\n\n    const navigate = useNavigate()\n\n    const orderID = order.orderID\n\n    // const seeUpdateAddresses = () => {\n    //     navigate(\"/AddressesUpdate\")\n    // }\n\n    const seeOrderDetails = () => {\n        navigate(\"/OrderDetails\")\n    }\n\n    const onDelete = () => {\n        const deleteOrders = async () => {\n            const action = \"Delete\"\n\n            const newOrderValues = {\n                action, orderID\n            }\n            const response = await fetch('/api/Orders', {\n                method: 'POST',\n                body: JSON.stringify(newOrderValues),\n                headers: { 'Content-Type': 'application/json' },\n            })\n            const responseJson = await response.json()\n            if (responseJson.request_received === \"success\") {\n                alert(\"Successfully deleted the Order!\\nThe page will now refresh.\")\n                window.location.reload()\n            } else {\n                alert(\"Failed to delete Order, please try again!\")\n            }\n        }\n        const answer = window.confirm(\"This will delete the selected Order.\\nDo you wish to proceed?\")\n        if (answer) {\n            deleteOrders()\n                .catch(console.error)\n        }\n    }\n\n    const setDate = () => {\n        console.log('here')\n        const newDate = new Date().toLocaleDateString();\n        const time = new Date().toLocaleTimeString();\n        const combinedDateTime = `${newDate} ${time}`\n        return combinedDateTime\n    }\n\n    const newDate = new Date().toLocaleDateString();\n    const time = new Date().toLocaleTimeString();\n    const combinedDateTime = `${newDate} ${time}`\n\n    const handleDateTime = (input) => {\n        console.log(input)\n        if (input === null) {\n            return \"Not shipped yet\"\n        }\n        else {\n            return input\n        }\n    }\n\n    return (\n        <tr>\n            <td>{order.orderID}</td>\n            <td>{order.customerID}</td>\n            <td>{order.addressID}</td>\n            <td>{handleDateTime(order.shipDateTime)}</td>\n            <td>\n                <input type=\"button\" value=\"See Order Details\" onClick={seeOrderDetails} />\n            </td>\n            <td>\n                <input type=\"button\" value=\"Update Address\" />\n            </td>\n            <td>\n                <input type=\"button\" value=\"Mark Shipped\" onClick={() => handleDateTime(combinedDateTime)} />\n            </td>\n            <td>\n                <input type=\"button\" value=\"Delete\"\n                    onClick={onDelete}\n                />\n            </td>\n        </tr>\n    )\n}\n{/* <input type=\"button\" value=\"Update Address\" onClick={seeUpdateAddresses}/> */} //have to figure out which customer ID it selects to update address","import React from 'react'\nimport OrderRowComponent from \"./OrderRowComponent\";\n\nexport default function OrderTableComponent(\n    { orders, setOrderToEdit }) {\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>Order ID</th>\n                    <th>Address ID</th>\n                    <th>Customer ID</th>\n                    <th>Ship Date and Time</th>\n                    <th colSpan=\"4\">Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {orders.map((order, i) =>\n                    <OrderRowComponent\n                        order={order}\n                        key={i}\n                        setOrderToEdit={setOrderToEdit}\n                    />)}\n            </tbody>\n        </table>\n    )\n}\n","import React from 'react'\nimport OrderTableComponent from \"./OrderTableComponent\";\nimport { useEffect, useState } from \"react\";\n\nexport default function OrderBrowseComponent({ setOrderToEdit }) {\n\n    const [orders, setOrders] = useState([])\n\n    useEffect(() => {\n        const getResponse = async () => {\n            const response = await fetch(\"/api/Orders\")\n            const responseJson = await response.json()\n            setOrders(responseJson)\n        }\n        getResponse()\n            .catch(console.error)\n    }, [])\n\n    return (\n        <fieldset>\n            <legend><strong>Browse Orders</strong></legend>\n            <OrderTableComponent\n                orders={orders}\n                setOrderToEdit={setOrderToEdit}\n            />\n        </fieldset>\n    )\n}","import React from 'react'\nimport { Link } from \"react-router-dom\";\nimport OrderBrowseComponent from \"../../Components/Orders/OrderBrowseComponent\";\n//import OrderSearchComponent from \"../Components/OrderSearchComponent\";\n\nexport default function Orders({ setOrderToEdit }) {\n\n    return (\n        <div>\n            <h2>Orders</h2>\n            <Link to=\"/OrdersAdd\"><button>Add a new Order</button></Link>\n            <br />\n            <br />\n            <OrderBrowseComponent\n                setOrderToEdit={setOrderToEdit} />\n        </div>\n    )\n}\n\n//<OrderSearchComponent/>\n","import React from 'react'\nimport {useState} from \"react\";\nimport {useNavigate} from \"react-router-dom\";\n\nexport default function ProductRowComponent(\n    {product, setProductToEdit}) {\n\n    const navigate = useNavigate()\n\n    const productID = product.productID\n\n    const onUpdate = () => {\n        setProductToEdit(product)\n        navigate(\"/ProductsUpdate\")\n    }\n\n    const onDelete = () => {\n        const deleteProduct = async () => {\n            const action = \"Delete\"\n\n            const newProductValues = {\n                action, productID\n            }\n            const response = await fetch('/api/Products', {\n                method: 'POST',\n                body: JSON.stringify(newProductValues),\n                headers: {'Content-Type': 'application/json'},\n            })\n            const responseJson = await response.json()\n            if (responseJson.request_received === \"success\") {\n                alert(\"Successfully deleted the Product!\\nThe page will now refresh.\")\n                window.location.reload()\n            } else {\n                alert(\"Failed to delete Product, please try again!\")\n            }\n        }\n        const answer = window.confirm(\"This will delete the selected Product.\\nDo you wish to proceed?\")\n        if (answer) {\n            deleteProduct()\n                .catch(console.error)\n        }\n    }\n\n\n\n\n\n    return (\n        <tr>\n            <td>{product.productID}</td>\n            <td>{product.productName}</td>\n            <td>{product.description}</td>\n            <td>{product.brand}</td>\n            <td>{product.weightVal}</td>\n            <td>{product.weightUnit}</td>\n            <td>${product.sellPrice}</td>\n            <td>${product.replenishCost}</td>\n            <td>{product.numberInStock}</td>\n            <td>\n                <input type=\"button\" value=\"Update\" onClick={onUpdate}/>\n            </td>\n            <td>\n                <input type=\"button\" value=\"Delete\"\n                       onClick={onDelete}\n                />\n            </td>\n        </tr>\n    )\n}\n","import React from 'react'\nimport ProductRowComponent from \"./ProductRowComponent\";\n\nexport default function ProductTableComponent(\n    {products, setProductToEdit}) {\n    return (\n        <table>\n            <thead>\n            <tr>\n                <th>Product ID</th>\n                <th>Product Name</th>\n                <th>Description</th>\n                <th>Brand</th>\n                <th colSpan=\"2\">Weight</th>\n                <th>Sell Price</th>\n                <th>Replenish Cost</th>\n                <th>Number in Stock</th>\n                <th colSpan=\"2\">Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {products.map((product, i) =>\n                    <ProductRowComponent\n                        product={product}\n                        key={i}\n                        setProductToEdit={setProductToEdit}\n                    />)}\n            </tbody>\n        </table>\n    )\n}\n","import React from 'react'\nimport ProductTableComponent from \"./ProductTableComponent\";\nimport {useEffect, useState} from \"react\";\n\nexport default function ProductBrowseComponent( {setProductToEdit} ) {\n\n    const [products, setProducts] = useState([])\n\n    useEffect(() => {\n        const getResponse = async() => {\n            const response = await fetch(\"/api/Products\")\n            const responseJson = await response.json()\n            setProducts(responseJson)\n        }\n        getResponse()\n            .catch(console.error)\n    }, [])\n\n    return (\n        <fieldset>\n            <legend><strong>Browse Products</strong></legend>\n            <ProductTableComponent\n                products={products}\n                setProductToEdit={setProductToEdit}\n            />\n        </fieldset>\n    )\n}","import React from 'react'\nimport {Link} from \"react-router-dom\";\nimport ProductBrowseComponent from \"../../Components/Products/ProductBrowseComponent\";\n//import ProductSearchComponent from \"../Components/ProductSearchComponent\";\n\nexport default function Products({setProductToEdit}) {\n\n    return (\n        <div>\n            <h2>Products</h2>\n            <Link to=\"/ProductsAdd\"><button>Add a new Product</button></Link>\n            <br/>\n            <br/>\n            <ProductBrowseComponent\n                setProductToEdit={setProductToEdit}/>\n        </div>\n    )\n}\n\n//<ProductSearchComponent/>","import React from 'react'\nimport {useState} from \"react\";\nimport {Link, useNavigate} from \"react-router-dom\";\n\nexport default function Products() {\n\n    const navigate = useNavigate()\n\n    const [productName, setProductName] = useState('')\n    const [description, setDescription] = useState('')\n    const [brand, setBrand] = useState('')\n    const [weightVal, setWeightVal] = useState('')\n    const [weightUnit, setWeightUnit] = useState('')\n    const [sellPrice, setSellPrice] = useState('')\n    const [replenishCost, setReplenishCost] = useState('')\n    const [numberInStock, setNumberInStock] = useState('')\n\n    const handleReset = () => {\n        setProductName('')\n        setDescription('')\n        setBrand('')\n        setWeightVal('')\n        setWeightUnit('')\n        setSellPrice('')\n        setReplenishCost('')\n        setNumberInStock('')\n    }\n\n    const handleSubmit = () => {\n        if (productName === '' || description === ''|| brand === ''\n            || weightVal === ''|| weightUnit === ''|| sellPrice === ''\n            || replenishCost === ''|| numberInStock === '') {\n            alert(\"Please enter values!\")\n        }\n        else {\n            const action = \"Add\"\n            const newProduct = async () => {\n                const newProductValues = {\n                    action,\n                    productName,\n                    description,\n                    brand,\n                    weightVal,\n                    weightUnit,\n                    sellPrice,\n                    replenishCost,\n                    numberInStock\n                }\n                const response = await fetch('/api/Products', {\n                    method: 'POST',\n                    body: JSON.stringify(newProductValues),\n                    headers: {'Content-Type': 'application/json'},\n                })\n                const responseJson = await response.json()\n                if (responseJson.request_received === \"success\") {\n                    alert(\"Successfully added the Product!\\nYou will now be redirected to the Products Page.\")\n                    navigate(\"/Products\")\n                } else {\n                    alert(\"Failed to add Product, please check the input and try again!\")\n                }\n            }\n            const answer = window.confirm(\"This will create a new Product with the entered values.\\nDo you wish to proceed?\")\n            if (answer) {\n                newProduct()\n                    .catch(console.error)\n            }\n        }\n    }\n\n\n\n    return (\n        <fieldset class=\"form\">\n            <legend><strong>Add a new Product</strong></legend>\n            <label>Product Name:</label>\n                <input type=\"text\"\n                       id=\"productName\"\n                       maxLength=\"100\"\n                       value={productName}\n                       onChange={e => setProductName(e.target.value)}/>\n            <label>Description:</label>\n                <input type=\"text\"\n                       id=\"description\"\n                       maxLength=\"1000\"\n                       value={description}\n                       onChange={e => setDescription(e.target.value)}/>\n            <label>Brand:</label>\n                <input type=\"text\"\n                       id=\"brand\"\n                       maxLength=\"100\"\n                       value={brand}\n                       onChange={e => setBrand(e.target.value)}/>\n\n\n            <label>Weight Value:</label>\n                <br/>\n                <input type=\"number\"\n                       id=\"weightVal\"\n                       step='0.01'\n                       min=\"0\"\n                       max=\"10000\"\n                       title=\"How much product there is\"\n                       value={weightVal && Math.max(0, weightVal)}\n                       onChange={e => setWeightVal(e.target.value)}/>\n                <br/>\n            <label>Weight Unit:</label>\n                <br/>\n                <select id=\"weightUnit\" onChange={e => setWeightUnit(e.target.value)}>\n                    <option value=\"none\" selected disabled hidden>Select</option>\n                    <option value=\"lbs\">lbs</option>\n                    <option value=\"oz\">oz</option>\n                </select>\n                <br/>\n            <label>Sell Price:</label>\n                <br/>\n                <span>$ </span>\n                <input type=\"number\"\n                       id=\"sellPrice\"\n                       step='0.01'\n                       min=\"0\"\n                       max=\"10000\"\n                       title=\"The selling price of the product to the consumer\"\n                       value={sellPrice && Math.max(0, sellPrice)}\n                       onChange={e => setSellPrice(e.target.value)}/>\n                <br/>\n            <label>Replenish Cost:</label>\n                <br/>\n                <span>$ </span>\n                <input type=\"number\"\n                       id=\"replenish cost\"\n                       step='0.01'\n                       min=\"0\"\n                       max=\"10000\"\n                       title=\"How much it cost CoffeeBuzz to pay to refill\"\n                       value={replenishCost && Math.max(0, replenishCost)}\n                       onChange={e => setReplenishCost(e.target.value)}/>\n                <br/>\n            <label>Number in Stock:</label>\n                <input type=\"number\"\n                       id=\"number in stock\"\n                       min=\"0\"\n                       max=\"10000\"\n                       value={numberInStock && Math.max(0, numberInStock)}\n                       onChange={e => setNumberInStock(e.target.value)}/>\n                <br/>\n                <br/>\n            <button onClick={handleSubmit}>Submit</button>\n            <button onClick={handleReset}>Reset</button>\n            <Link to=\"/Products\"><button>Cancel</button></Link>\n        </fieldset>\n    )\n}\n\n//<ProductSearchComponent/>","import React from 'react'\nimport {useState} from \"react\";\nimport {Link, useNavigate} from \"react-router-dom\";\n\nexport default function Products({productToEdit}) {\n\n    const navigate = useNavigate()\n\n    const [productNameUpdate, setProductNameUpdate] = useState(productToEdit.productName)\n    const [descriptionUpdate, setDescriptionUpdate] = useState(productToEdit.description)\n    const [brandUpdate, setBrandUpdate] = useState(productToEdit.brand)\n    const [weightValUpdate, setWeightValUpdate] = useState(productToEdit.weightVal)\n    const [weightUnitUpdate, setWeightUnitUpdate] = useState(productToEdit.weightUnit)\n    const [sellPriceUpdate, setSellPriceUpdate] = useState(productToEdit.sellPrice)\n    const [replenishCostUpdate, setReplenishCostUpdate] = useState(productToEdit.replenishCost)\n    const [numberInStockUpdate, setNumberInStockUpdate] = useState(productToEdit.numberInStock)\n\n    const handleReset = () => {\n        setProductNameUpdate(productToEdit.productName)\n        setDescriptionUpdate(productToEdit.description)\n        setBrandUpdate(productToEdit.brand)\n        setWeightValUpdate(productToEdit.weightVal)\n        setWeightUnitUpdate(productToEdit.weightUnit)\n        setSellPriceUpdate(productToEdit.sellPrice)\n        setReplenishCostUpdate(productToEdit.replenishCost)\n        setNumberInStockUpdate(productToEdit.numberInStock)\n    }\n\n    const handleSubmit = () => {\n        if (productNameUpdate === '' || descriptionUpdate === ''|| brandUpdate === ''\n            || weightValUpdate === ''|| weightUnitUpdate === ''|| sellPriceUpdate === ''\n            || replenishCostUpdate === ''|| numberInStockUpdate === '') {\n            alert(\"Please enter values!\")\n        }\n        else {\n            const action = \"Update\"\n            const productID = productToEdit.productID\n            const newProduct = async () => {\n                const newProductValues = {\n                    action,\n                    productNameUpdate,\n                    descriptionUpdate,\n                    brandUpdate,\n                    weightValUpdate,\n                    weightUnitUpdate,\n                    sellPriceUpdate,\n                    replenishCostUpdate,\n                    numberInStockUpdate,\n                    productID\n                }\n                const response = await fetch('/api/Products', {\n                    method: 'POST',\n                    body: JSON.stringify(newProductValues),\n                    headers: {'Content-Type': 'application/json'},\n                })\n                const responseJson = await response.json()\n                if (responseJson.request_received === \"success\") {\n                    alert(\"Successfully updated the Product!\\nYou will now be redirected to the Products Page.\")\n                    navigate(\"/Products\")\n                } else {\n                    alert(\"Failed to update Product, please check the input and try again!\")\n                }\n            }\n            const answer = window.confirm(\"This will update this Product with the entered values.\\nDo you wish to proceed?\")\n            if (answer) {\n                newProduct()\n                    .catch(console.error)\n            }\n        }\n    }\n\n\n\n    return (\n        <fieldset class=\"form\">\n            <legend><strong>Update Product</strong></legend>\n            <label>Product ID:</label>\n            <input type=\"text\"\n                   id=\"productID\"\n                   value={productToEdit.productID} disabled/>\n            <label>Product Name:</label>\n            <input type=\"text\"\n                   id=\"productName\"\n                   maxLength=\"100\"\n                   value={productNameUpdate}\n                   onChange={e => setProductNameUpdate(e.target.value)}/>\n            <label>Description:</label>\n            <input type=\"text\"\n                   id=\"description\"\n                   maxLength=\"1000\"\n                   value={descriptionUpdate}\n                   onChange={e => setDescriptionUpdate(e.target.value)}/>\n            <label>Brand:</label>\n            <input type=\"text\"\n                   id=\"brand\"\n                   maxLength=\"100\"\n                   value={brandUpdate}\n                   onChange={e => setBrandUpdate(e.target.value)}/>\n\n\n            <label>Weight Value:</label>\n            <br/>\n            <input type=\"number\"\n                   id=\"weightVal\"\n                   step='0.01'\n                   min=\"0\"\n                   max=\"10000\"\n                   title=\"How much product there is\"\n                   value={weightValUpdate && Math.max(0, weightValUpdate)}\n                   onChange={e => setWeightValUpdate(e.target.value)}/>\n            <br/>\n            <label>Weight Unit:</label>\n            <br/>\n            <select id=\"weightUnit\" onChange={e => setWeightUnitUpdate(e.target.value)}>\n                <option value={weightUnitUpdate} selected disabled hidden>{weightUnitUpdate}</option>\n                <option value=\"lbs\">lbs</option>\n                <option value=\"oz\">oz</option>\n            </select>\n            <br/>\n            <label>Sell Price:</label>\n            <br/>\n            <span>$ </span>\n            <input type=\"number\"\n                   id=\"sellPrice\"\n                   step='0.01'\n                   min=\"0\"\n                   max=\"10000\"\n                   title=\"The selling price of the product to the consumer\"\n                   value={sellPriceUpdate && Math.max(0, sellPriceUpdate)}\n                   onChange={e => setSellPriceUpdate(e.target.value)}/>\n            <br/>\n            <label>Replenish Cost:</label>\n            <br/>\n            <span>$ </span>\n            <input type=\"number\"\n                   id=\"replenish cost\"\n                   step='0.01'\n                   min=\"0\"\n                   max=\"10000\"\n                   title=\"How much it cost CoffeeBuzz to pay to refill\"\n                   value={replenishCostUpdate && Math.max(0, replenishCostUpdate)}\n                   onChange={e => setReplenishCostUpdate(e.target.value)}/>\n            <br/>\n            <label>Number in Stock:</label>\n            <input type=\"number\"\n                   id=\"number in stock\"\n                   min=\"0\"\n                   max=\"10000\"\n                   value={numberInStockUpdate && Math.max(0, numberInStockUpdate)}\n                   onChange={e => setNumberInStockUpdate(e.target.value)}/>\n            <br/>\n            <br/>\n            <button onClick={handleSubmit}>Submit</button>\n            <button onClick={handleReset}>Reset</button>\n            <Link to=\"/Products\"><button>Cancel</button></Link>\n        </fieldset>\n    )\n}\n\n//<ProductSearchComponent/>","import React from 'react'\n\nexport default function FooterComponent (){\n    return (\n        <footer>\n            Copyright 2022 – Kelsey Schmidt and Andy Chen – CS340 Final Project\n        </footer>\n    )\n}","import React from 'react'\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nexport default function Address() {\n\n    const navigate = useNavigate()\n\n    const [recipient, setRecipientName] = useState('')\n    const [street, setStreet] = useState('')\n    const [city, setCity] = useState('')\n    const [state, setState] = useState('')\n    const [zip, setZip] = useState('')\n    const [isActive, setIsActive] = useState('')\n    const [isPrimary, setIsPrimary] = useState('')\n\n    const handleReset = () => {\n        setRecipientName('')\n        setStreet('')\n        setCity('')\n        setState('')\n        setZip('')\n        setIsActive('')\n        setIsPrimary('')\n    }\n\n    const numericZip = (e) => {\n        const value = e.target.value.replace(/\\D/g, \"\");\n        setZip(value);\n    };\n\n    const handleActiveChange = (e) => {\n        let isChecked = e.target.checked\n        \n        // console.log(e.target.value)\n        if (isChecked){\n            e.target.value = 1\n            setIsActive(e.target.value)\n        } else{\n            e.target.value = 0\n            setIsActive(e.target.value)\n        }\n    };\n\n    const handlePrimaryChange = (e) => {\n        let isChecked = e.target.checked\n        if (isChecked){\n            e.target.value = 1\n            setIsPrimary(e.target.value)\n        } else{\n            e.target.value = 0\n            setIsPrimary(e.target.value)\n        }\n    };\n\n    const handleSubmit = () => {\n        if (recipient === '' || street === '' || city === ''\n            || state === '' || zip === '') {\n            alert(\"Please enter values!\")\n        }\n        else {\n            const action = \"Add\"\n            const newAddress = async () => {\n                const newAddressValues = {\n                    action,\n                    recipient,\n                    street,\n                    city,\n                    state,\n                    zip,\n                    isActive,\n                    isPrimary\n                }\n                const response = await fetch('/api/Addresses', {\n                    method: 'POST',\n                    body: JSON.stringify(newAddressValues),\n                    headers: { 'Content-Type': 'application/json' },\n                })\n                const responseJson = await response.json()\n                if (responseJson.request_received === \"success\") {\n                    alert(\"Successfully added the Address!\\nYou will now be redirected to the Addresses Page.\")\n                    navigate(\"/Addresses\")\n                } else {\n                    alert(\"Failed to add Address, please check the input and try again!\")\n                }\n            }\n            const answer = window.confirm(\"This will create a new Address with the entered values.\\nDo you wish to proceed?\")\n            if (answer) {\n                newAddress()\n                    .catch(console.error)\n            }\n        }\n    }\n\n\n\n    return (\n        <fieldset class=\"form\">\n            <legend><strong>Add a new Address</strong></legend>\n            <label>Recipient:</label>\n            <input type=\"text\"\n                id=\"recipient\"\n                maxLength=\"100\"\n                value={recipient}\n                onChange={e => setRecipientName(e.target.value)} />\n            <label>Street:</label>\n            <input type=\"text\"\n                id=\"street\"\n                maxLength=\"100\"\n                value={street}\n                onChange={e => setStreet(e.target.value)} />\n            <br />\n            <label>City:</label>\n            <br />\n            <input type=\"text\"\n                id=\"city\"\n                maxLength=\"100\"\n                value={city}\n                onChange={e => setCity(e.target.value)} />\n            <br />\n            <label>State:</label>\n            <br />\n            <input type=\"text\"\n                id=\"state\"\n                maxLength=\"2\"\n                value={state}\n                onChange={e => setState(e.target.value)} />\n            <br />\n            <label>Zip:</label>\n            <br />\n            <input type=\"text\"\n                id=\"zip\"\n                maxLength=\"10\"\n                value={zip}\n                onChange={numericZip} />\n            <br />\n            <label>isActive:</label>\n            <br />\n            <input type=\"checkbox\"\n                id=\"isActive\"\n                // checked={0}\n                value={isActive}\n                onChange={e => handleActiveChange(e)} />\n            <br />\n            <label>isPrimary:</label>\n            <br />\n            <input type=\"checkbox\"\n                id=\"isPrimary\"\n                // checked={0}\n                value={isPrimary}\n                onChange={e => handlePrimaryChange(e)} />\n            <br />\n            <br />\n            <button onClick={handleSubmit}>Submit</button>\n            <button onClick={handleReset}>Reset</button>\n            <Link to=\"/Addresses\"><button>Cancel</button></Link>\n        </fieldset>\n    )\n}\n\n//<AddressSearchComponent/>","import React from 'react'\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nexport default function Address({ addressToEdit }) {\n\n    const navigate = useNavigate()\n\n    const [recipientUpdate, setRecipientNameUpdate] = useState(addressToEdit.recipient)\n    const [streetUpdate, setStreetUpdate] = useState(addressToEdit.street)\n    const [cityUpdate, setCityUpdate] = useState(addressToEdit.city)\n    const [stateUpdate, setStateUpdate] = useState(addressToEdit.state)\n    const [zipUpdate, setZipUpdate] = useState(addressToEdit.zip)\n    const [isActiveUpdate, setIsActiveUpdate] = useState(addressToEdit.isActive)\n    const [isPrimaryUpdate, setIsPrimaryUpdate] = useState(addressToEdit.isPrimary)\n\n    const handleReset = () => {\n        setRecipientNameUpdate(addressToEdit.recipient)\n        setStreetUpdate(addressToEdit.street)\n        setCityUpdate(addressToEdit.city)\n        setStateUpdate(addressToEdit.state)\n        setZipUpdate(addressToEdit.zip)\n        setIsActiveUpdate(addressToEdit.isActive)\n        setIsPrimaryUpdate(addressToEdit.isPrimary)\n    }\n\n    const numericZip = (e) => {\n        const value = e.target.value.replace(/\\D/g, \"\");\n        setZipUpdate(value);\n    };\n\n    const handleCheckActiveChange = (checkValue) => {\n        if (checkValue.checked) {\n            return setIsActiveUpdate(1)\n        } else if (!checkValue.checked) {\n            return setIsActiveUpdate(0)\n        }\n    };\n\n    const handleSubmit = () => {\n        if (recipientUpdate === '' || streetUpdate === '' || cityUpdate === ''\n            || stateUpdate === '' || zipUpdate === '') {\n            alert(\"Please enter values!\")\n        }\n        else {\n            const action = \"Update\"\n            const addressID = addressToEdit.addressID\n            const newAddress = async () => {\n                const newAddressValues = {\n                    action,\n                    recipientUpdate,\n                    streetUpdate,\n                    cityUpdate,\n                    stateUpdate,\n                    zipUpdate,\n                    isActiveUpdate,\n                    isPrimaryUpdate,\n                    addressID\n                }\n                const response = await fetch('/api/Addresses', {\n                    method: 'POST',\n                    body: JSON.stringify(newAddressValues),\n                    headers: { 'Content-Type': 'application/json' },\n                })\n                const responseJson = await response.json()\n                if (responseJson.request_received === \"success\") {\n                    alert(\"Successfully updated the Address!\\nYou will now be redirected to the Addresses Page.\")\n                    navigate(\"/Addresses\")\n                } else {\n                    alert(\"Failed to update Address, please check the input and try again!\")\n                }\n            }\n            const answer = window.confirm(\"This will update this Address with the entered values.\\nDo you wish to proceed?\")\n            if (answer) {\n                newAddress()\n                    .catch(console.error)\n            }\n        }\n    }\n\n\n\n    return (\n        <fieldset class=\"form\">\n            <legend><strong>Update Address</strong></legend>\n            <label>Address ID:</label>\n            <input type=\"text\"\n                id=\"addressID\"\n                value={addressToEdit.addressID} disabled />\n            <label>Recipient:</label>\n            <input type=\"text\"\n                id=\"recipient\"\n                maxLength=\"100\"\n                value={recipientUpdate}\n                onChange={e => setRecipientNameUpdate(e.target.value)} />\n            <label>Street:</label>\n            <input type=\"text\"\n                id=\"street\"\n                maxLength=\"100\"\n                value={streetUpdate}\n                onChange={e => setStreetUpdate(e.target.value)} />\n            <br />\n            <label>City:</label>\n            <br />\n            <input type=\"text\"\n                id=\"city\"\n                maxLength=\"100\"\n                value={cityUpdate}\n                onChange={e => setCityUpdate(e.target.value)} />\n            <br />\n            <label>State:</label>\n            <br />\n            <input type=\"text\"\n                id=\"state\"\n                maxLength=\"2\"\n                value={stateUpdate}\n                onChange={e => setStateUpdate(e.target.value)} />\n            <br />\n            <label>Zip:</label>\n            <br />\n            <input type=\"text\"\n                id=\"zip\"\n                maxLength=\"10\"\n                value={zipUpdate}\n                onChange={numericZip} />\n            <br />\n            <label>isActive:</label>\n            <br />\n            <input type=\"checkbox\"\n                id=\"isActive\"\n                value={isActiveUpdate}\n                onChange={e => setIsActiveUpdate(e.target)} />\n            <br />\n            <label>isPrimary:</label>\n            <br />\n            <input type=\"checkbox\"\n                id=\"isPrimary\"\n                value={isPrimaryUpdate}\n                onChange={e => setIsPrimaryUpdate(e.target.value)} />\n            <br />\n            <br />\n            <button onClick={handleSubmit}>Submit</button>\n            <button onClick={handleReset}>Reset</button>\n            <Link to=\"/Addresses\"><button>Cancel</button></Link>\n        </fieldset>\n    )\n}\n\n//<AddressSearchComponent/>","import React from 'react'\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nexport default function Customers() {\n\n    const navigate = useNavigate()\n\n    const [customerName, setCustomerName] = useState('')\n    const [email, setEmail] = useState('')\n    const [phoneNumber, setPhoneNumber] = useState('')\n\n    const handleReset = () => {\n        setCustomerName('')\n        setEmail('')\n        setPhoneNumber('')\n    }\n\n    const validatePhoneNumber = (input) =>{\n        if (Number(input) === Number(input)){\n            const correctInput = input.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3')\n            setPhoneNumber(correctInput)\n        } else {\n            return false\n        }\n    }\n\n    const handleSubmit = () => {\n        if (customerName === '' || email === '' || phoneNumber === '') {\n            alert(\"Please enter values!\")\n        }\n        else {\n            const action = \"Add\"\n            const newCustomer = async () => {\n                const newCustomerValues = {\n                    action,\n                    customerName,\n                    email,\n                    phoneNumber\n                }\n                const response = await fetch('/api/Customers', {\n                    method: 'POST',\n                    body: JSON.stringify(newCustomerValues),\n                    headers: { 'Content-Type': 'application/json' },\n                })\n                const responseJson = await response.json()\n                if (responseJson.request_received === \"success\") {\n                    alert(\"Successfully added the Customer!\\nYou will now be redirected to the Customers Page.\")\n                    navigate(\"/Customers\")\n                } else {\n                    alert(\"Failed to add Customer, please check the input and try again!\")\n                }\n            }\n            const answer = window.confirm(\"This will create a new Customer with the entered values.\\nDo you wish to proceed?\")\n            if (answer) {\n                newCustomer()\n                    .catch(console.error)\n            }\n        }\n    }\n\n\n\n    return (\n        <fieldset class=\"form\">\n            <legend><strong>Add a new Customer</strong></legend>\n            <label>Customer Name:</label>\n            <input type=\"text\"\n                id=\"customerName\"\n                maxLength=\"100\"\n                value={customerName}\n                onChange={e => setCustomerName(e.target.value)} />\n            <br />\n            <label>Email:</label>\n            <br />\n            <input type=\"email\"\n                id=\"email\"\n                maxLength=\"100\"\n                value={email}\n                placeholder='example@example.com'\n                onChange={e => setEmail(e.target.value)} />\n            <br />\n            <label>Phone Number:</label>\n            <input type=\"text\"\n                id=\"phoneNumber\"\n                value={phoneNumber}\n                maxLength=\"12\"\n                placeholder='123-456-1254'\n                onChange={e => validatePhoneNumber(e.target.value)} />\n            <br />\n            <br />\n            <button onClick={handleSubmit}>Submit</button>\n            <button onClick={handleReset}>Reset</button>\n            <Link to=\"/Customers\"><button>Cancel</button></Link>\n        </fieldset>\n    )\n}\n\n//<CustomerSearchComponent/>","import React from 'react'\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nexport default function Customers({ customerToEdit }) {\n\n    const navigate = useNavigate()\n\n    const [customerNameUpdate, setCustomerNameUpdate] = useState(customerToEdit.customerName)\n    const [emailUpdate, setEmailUpdate] = useState(customerToEdit.email)\n    const [phoneNumberUpdate, setPhoneNumberUpdate] = useState(customerToEdit.phoneNumber)\n\n    const handleReset = () => {\n        setCustomerNameUpdate(customerToEdit.customerName)\n        setEmailUpdate(customerToEdit.email)\n        setPhoneNumberUpdate(customerToEdit.phoneNumber)\n    }\n\n    const validatePhoneNumber = (input) =>{\n        if (Number(input) === Number(input)){\n            const correctInput = input.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3')\n            setPhoneNumberUpdate(correctInput)\n        } else {\n            return false\n        }\n    }\n\n    const handleSubmit = () => {\n        if (customerNameUpdate === '' || emailUpdate === '' || phoneNumberUpdate === '') {\n            alert(\"Please enter values!\")\n        }\n        else {\n            const action = \"Update\"\n            const customerID = customerToEdit.customerID\n            const newCustomer = async () => {\n                const newCustomerValues = {\n                    action,\n                    customerNameUpdate,\n                    emailUpdate,\n                    phoneNumberUpdate,\n                    customerID\n                }\n                const response = await fetch('/api/Customers', {\n                    method: 'POST',\n                    body: JSON.stringify(newCustomerValues),\n                    headers: { 'Content-Type': 'application/json' },\n                })\n                const responseJson = await response.json()\n                if (responseJson.request_received === \"success\") {\n                    alert(\"Successfully updated the Customer!\\nYou will now be redirected to the Customers Page.\")\n                    navigate(\"/Customers\")\n                } else {\n                    alert(\"Failed to update Customer, please check the input and try again!\")\n                }\n            }\n            const answer = window.confirm(\"This will update this Customer with the entered values.\\nDo you wish to proceed?\")\n            if (answer) {\n                newCustomer()\n                    .catch(console.error)\n            }\n        }\n    }\n\n    return (\n        <fieldset class=\"form\">\n            <legend><strong>Update Customer</strong></legend>\n            <label>Customer ID:</label>\n            <input type=\"text\"\n                id=\"customerID\"\n                value={customerToEdit.customerID} disabled />\n            <label>Customer Name:</label>\n            <input type=\"text\"\n                id=\"customerName\"\n                maxLength=\"100\"\n                value={customerNameUpdate}\n                onChange={e => setCustomerNameUpdate(e.target.value)} />\n            <br />\n            <label>Email:</label>\n            <br />\n            <input type=\"text\"\n                id=\"email\"\n                maxLength=\"100\"\n                value={emailUpdate}\n                onChange={e => setEmailUpdate(e.target.value)} />\n            <br />\n            <label>Phone Number:</label>\n            <input type=\"text\"\n                id=\"phoneNumber\"\n                maxLength=\"12\"\n                value={phoneNumberUpdate}\n                placeholder='123-456-1254'\n                onChange={e => validatePhoneNumber(e.target.value)} />\n            <br />\n            <br />\n            <button onClick={handleSubmit}>Submit</button>\n            <button onClick={handleReset}>Reset</button>\n            <Link to=\"/Customers\"><button>Cancel</button></Link>\n        </fieldset>\n    )\n}\n\n//<CustomerSearchComponent/>","import React from 'react'\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nexport default function Orders() {\n\n    const navigate = useNavigate()\n\n    const [addressID, setAddressID] = useState('')\n    const [customerID, setCustomerID] = useState('')\n    const [shipDateTime, setShipDateTime] = useState(null)\n\n\n    const handleReset = () => {\n        setAddressID('')\n        setCustomerID('')\n        setShipDateTime('')\n    }\n\n\n    const handleSubmit = () => {\n        if (addressID === '' || customerID === '') {\n            alert(\"Please enter values!\")\n        }\n        else {\n            const action = \"Add\"\n            // const addressID = orderToEdit.addressID\n            // const customerID = orderToEdit.customerID\n            const newOrder = async () => {\n                const newOrderValues = {\n                    action,\n                    addressID,\n                    customerID,\n                    shipDateTime\n                }\n                const response = await fetch('/api/Orders', {\n                    method: 'POST',\n                    body: JSON.stringify(newOrderValues),\n                    headers: { 'Content-Type': 'application/json' },\n                })\n                const responseJson = await response.json()\n                if (responseJson.request_received === \"success\") {\n                    alert(\"Successfully added the Order!\\nYou will now be redirected to the Orders Page.\")\n                    navigate(\"/Orders\")\n                } else {\n                    alert(\"Failed to add Order, please check the input and try again!\")\n                }\n            }\n            const answer = window.confirm(\"This will create a new Order with the entered values.\\nDo you wish to proceed?\")\n            if (answer) {\n                newOrder()\n                    .catch(console.error)\n            }\n        }\n    }\n\n\n\n    return (\n        <fieldset class=\"form\">\n            <legend><strong>Add a new Order</strong></legend>\n            <label>Address ID:</label>\n            <input type=\"number\"\n                id=\"addressID\"\n                maxLength=\"100\"\n                value={addressID}\n                onChange={e => setAddressID(e.target.value)}\n            />\n            <label>Customer ID:</label>\n            <input type=\"number\"\n                id=\"customerID\"\n                maxLength=\"100\"\n                value={customerID}\n                onChange={e => setCustomerID(e.target.value)}\n            />\n            <br />\n            <label>Ship Date Time:</label>\n            <br />\n            <input type=\"text\"\n                id=\"shipDateTime\"\n                value={shipDateTime}\n                onChange={(e) => setShipDateTime(e.target.value)}\n                disabled />\n            <br />\n            <br />\n            <button onClick={handleSubmit}>Submit</button>\n            <button onClick={handleReset}>Reset</button>\n            <Link to=\"/Orders\"><button>Cancel</button></Link>\n        </fieldset>\n    )\n}\n\n//<OrderSearchComponent/>","import React from 'react'\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function OrderDetailsRowComponent(\n    { orderDetails, setOrderDetailsToEdit }) {\n\n    const navigate = useNavigate()\n\n    const odID = orderDetails.odID\n\n    const onUpdate = () => {\n        setOrderDetailsToEdit(orderDetails)\n        navigate(\"/OrderDetailsUpdate\")\n    }\n\n    const onDelete = () => {\n        const deleteOrderDetails = async () => {\n            const action = \"Delete\"\n\n            const newOrderDetailValues = {\n                action, odID\n            }\n            const response = await fetch('/api/OrderDetails', {\n                method: 'POST',\n                body: JSON.stringify(newOrderDetailValues),\n                headers: { 'Content-Type': 'application/json' },\n            })\n            const responseJson = await response.json()\n            if (responseJson.request_received === \"success\") {\n                alert(\"Successfully deleted the OrderDetail!\\nThe page will now refresh.\")\n                window.location.reload()\n            } else {\n                alert(\"Failed to delete OrderDetail, please try again!\")\n            }\n        }\n        const answer = window.confirm(\"This will delete the selected OrderDetail.\\nDo you wish to proceed?\")\n        if (answer) {\n            deleteOrderDetails()\n                .catch(console.error)\n        }\n    }\n\n    return (\n        <tr>\n            <td>{orderDetails.odID}</td>\n            <td>{orderDetails.orderID}</td>\n            <td>{orderDetails.productID}</td>\n            <td>{orderDetails.productQuantity}</td>\n            <td>${orderDetails.unitPrice}</td>\n            <td>${orderDetails.lineTotal}</td>\n            <td>\n                <input type=\"button\" value=\"Update Order Details\" onClick={onUpdate}/>\n            </td>\n            <td>\n                <input type=\"button\" value=\"Delete\" onClick={onDelete}\n                />\n            </td>\n        </tr>\n    )\n}\n","import React from 'react'\nimport OrderDetailsRowComponent from \"./OrderDetailsRowComponent\";\n\nexport default function OrderDetailsTableComponent(\n    { orderDetails, setOrderDetailsToEdit }) {\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>Order Detail ID</th>\n                    <th>Order ID</th>\n                    <th>Product ID</th>\n                    <th>Product Quantity</th>\n                    <th>Unit Price</th>\n                    <th>Line Total</th>\n                    <th colSpan=\"2\">Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {orderDetails.map((orderDetails, i) =>\n                    <OrderDetailsRowComponent\n                    orderDetails={orderDetails}\n                        key={i}\n                        setOrderDetailsToEdit={setOrderDetailsToEdit}\n                    />)}\n            </tbody>\n        </table>\n    )\n}\n","import React from 'react'\nimport OrderDetailsTableComponent from \"./OrderDetailsTableComponent\";\nimport { useEffect, useState } from \"react\";\n\nexport default function OrderDetailsBrowseComponent({ setOrderDetailsToEdit }) {\n\n    const [orderDetails, setOrderDetails] = useState([])\n\n    useEffect(() => {\n        const getResponse = async () => {\n            const response = await fetch(\"/api/OrderDetails\")\n            const responseJson = await response.json()\n            setOrderDetails(responseJson)\n        }\n        getResponse()\n            .catch(console.error)\n    }, [])\n\n    return (\n        <fieldset>\n            <legend><strong>Browse OrderDetails</strong></legend>\n            <OrderDetailsTableComponent\n                orderDetails={orderDetails}\n                setOrderDetailsToEdit={setOrderDetailsToEdit}\n            />\n        </fieldset>\n    )\n}","import React from 'react'\nimport {Link} from \"react-router-dom\";\nimport OrderDetailsBrowseComponent from \"../../Components/OrderDetails/OrderDetailsBrowseComponent\";\n\nexport default function OrderDetails({setOrderDetailsToEdit}) {\n\n    return (\n        <div>\n            <h2>OrderDetails</h2>\n            <Link to=\"/OrderDetailsAdd\"><button>Add Order Detail</button></Link>\n            <br/>\n            <br/>\n            <OrderDetailsBrowseComponent\n                setOrderDetailsToEdit={setOrderDetailsToEdit}/>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nexport default function OrderDetails() {\n\n    const navigate = useNavigate()\n\n    const [orderID, setOrderID] = useState('')\n    const [productID, setProductID] = useState('')\n    const [productQuantity, setProductQuantity] = useState('')\n    const [unitPrice, setUnitPrice] = useState('')\n\n\n    const handleReset = () => {\n        setOrderID('')\n        setProductID('')\n        setProductQuantity('')\n        setUnitPrice('')\n    }\n\n    const handleSubmit = () => {\n        if (orderID === '' || productID === '' || productQuantity === ''\n            || unitPrice === '') {\n            alert(\"Please enter values!\")\n        }\n        else {\n            const action = \"Add\"\n            const newOrderDetail = async () => {\n                const newOrderDetailValues = {\n                    action,\n                    orderID,\n                    productID,\n                    productQuantity,\n                    unitPrice\n                }\n                const response = await fetch('/api/OrderDetails', {\n                    method: 'POST',\n                    body: JSON.stringify(newOrderDetailValues),\n                    headers: { 'Content-Type': 'application/json' },\n                })\n                const responseJson = await response.json()\n                if (responseJson.request_received === \"success\") {\n                    alert(\"Successfully added the OrderDetail!\\nYou will now be redirected to the OrderDetails Page.\")\n                    navigate(\"/OrderDetails\")\n                } else {\n                    alert(\"Failed to add OrderDetail, please check the input and try again!\")\n                }\n            }\n            const answer = window.confirm(\"This will create a new OrderDetail with the entered values.\\nDo you wish to proceed?\")\n            if (answer) {\n                newOrderDetail()\n                    .catch(console.error)\n            }\n        }\n    }\n\n\n\n    return (\n        <fieldset class=\"form\">\n            <legend><strong>Add Order Details</strong></legend>\n            <label>Order ID:</label>\n            <input type=\"text\"\n                id=\"orderID\"\n                maxLength=\"100\"\n                value={orderID}\n                onChange={e => setOrderID(e.target.value)} />\n            <label>Product ID:</label>\n            <input type=\"text\"\n                id=\"productID\"\n                maxLength=\"1000\"\n                value={productID}\n                onChange={e => setProductID(e.target.value)} />\n            <br />\n            <label>Product Quantity:</label>\n            <br/>\n            <input type=\"number\"\n                id=\"productQuantity\"\n                min=\"0\"\n                max=\"10000\"\n                value={productQuantity && Math.max(0, productQuantity)}\n                onChange={e => setProductQuantity(e.target.value)} />\n            <br/>\n            <label>Unit Price:</label>\n            <br />\n            <input type=\"number\"\n                id=\"unitPrice\"\n                min=\"0\"\n                max=\"10000\"\n                value={unitPrice && Math.max(0, unitPrice)}\n                onChange={e => setUnitPrice(e.target.value)} />\n            <br />\n            <br />\n            <button onClick={handleSubmit}>Submit</button>\n            <button onClick={handleReset}>Reset</button>\n            <Link to=\"/OrderDetails\"><button>Cancel</button></Link>\n        </fieldset>\n    )\n}\n\n","import React from 'react'\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nexport default function OrderDetails({ orderDetailsToEdit }) {\n\n    const navigate = useNavigate()\n\n    const [orderIDUpdate, setOrderIDUpdate] = useState(orderDetailsToEdit.orderID)\n    const [productIDUpdate, setProductIDUpdate] = useState(orderDetailsToEdit.productID)\n    const [productQuantityUpdate, setProductQuantityUpdate] = useState(orderDetailsToEdit.productQuantity)\n    const [unitPriceUpdate, setUnitPriceUpdate] = useState(orderDetailsToEdit.unitPrice)\n\n\n    const handleReset = () => {\n        setOrderIDUpdate(orderDetailsToEdit.orderID)\n        setProductIDUpdate(orderDetailsToEdit.productID)\n        setProductQuantityUpdate(orderDetailsToEdit.productQuantity)\n        setUnitPriceUpdate(orderDetailsToEdit.unitPrice)\n    }\n\n    const handleSubmit = () => {\n        if (orderIDUpdate === '' || productIDUpdate === '' || productQuantityUpdate === ''\n            || unitPriceUpdate === '') {\n            alert(\"Please enter values!\")\n        }\n        else {\n            const action = \"Add\"\n            const orderID = orderDetailsToEdit.orderID\n            const newOrderDetail = async () => {\n                const newOrderDetailValues = {\n                    action,\n                    orderIDUpdate,\n                    productIDUpdate,\n                    productQuantityUpdate,\n                    unitPriceUpdate\n                }\n                const response = await fetch('/api/OrderDetails', {\n                    method: 'POST',\n                    body: JSON.stringify(newOrderDetailValues),\n                    headers: { 'Content-Type': 'application/json' },\n                })\n                const responseJson = await response.json()\n                if (responseJson.request_received === \"success\") {\n                    alert(\"Successfully added the OrderDetail!\\nYou will now be redirected to the OrderDetails Page.\")\n                    navigate(\"/OrderDetails\")\n                } else {\n                    alert(\"Failed to add OrderDetail, please check the input and try again!\")\n                }\n            }\n            const answer = window.confirm(\"This will create a new OrderDetail with the entered values.\\nDo you wish to proceed?\")\n            if (answer) {\n                newOrderDetail()\n                    .catch(console.error)\n            }\n        }\n    }\n\n\n\n    return (\n        <fieldset class=\"form\">\n            <legend><strong>Update Order Details</strong></legend>\n            <label>Order ID:</label>\n            <input type=\"text\"\n                id=\"orderID\"\n                value={orderDetailsToEdit.orderID} disabled />\n            <label>Product ID:</label>\n            <input type=\"text\"\n                id=\"productID\"\n                maxLength=\"1000\"\n                value={productIDUpdate}\n                onChange={e => setProductIDUpdate(e.target.value)} />\n            <br />\n            <label>Product Quantity:</label>\n            <br />\n            <input type=\"number\"\n                id=\"productQuantity\"\n                min=\"0\"\n                max=\"10000\"\n                value={productQuantityUpdate && Math.max(0, productQuantityUpdate)}\n                onChange={e => setProductQuantityUpdate(e.target.value)} />\n            <br />\n            <label>Unit Price:</label>\n            <br />\n            <input type=\"number\"\n                id=\"unitPrice\"\n                min=\"0\"\n                max=\"10000\"\n                value={unitPriceUpdate && Math.max(0, unitPriceUpdate)}\n                onChange={e => setUnitPriceUpdate(e.target.value)} />\n            <br />\n            <br />\n            <button onClick={handleSubmit}>Submit</button>\n            <button onClick={handleReset}>Reset</button>\n            <Link to=\"/OrderDetails\"><button>Cancel</button></Link>\n        </fieldset>\n    )\n}\n\n","import React from 'react'\nimport './App.css'\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport HeaderComponent from \"./Components/Header-Footer/HeaderComponent\";\nimport Home from \"./Pages/Home\";\nimport Customers from \"./Pages/Customers/Customers\";\nimport Addresses from \"./Pages/Addresses/Addresses\";\nimport Orders from \"./Pages/Orders/Orders\";\nimport Products from \"./Pages/Products/Products\";\nimport ProductsAdd from \"./Pages/Products/ProductsAdd\";\nimport ProductsUpdate from \"./Pages/Products/ProductsUpdate\";\nimport FooterComponent from \"./Components/Header-Footer/FooterComponent\";\nimport AddressesAdd from \"./Pages/Addresses/AddressesAdd\";\nimport AddressesUpdate from \"./Pages/Addresses/AddressesUpdate\";\nimport CustomersAdd from \"./Pages/Customers/CustomersAdd\";\nimport CustomersUpdate from \"./Pages/Customers/CustomersUpdate\";\nimport OrdersAdd from \"./Pages/Orders/OrdersAdd\";\nimport OrderDetails from \"./Pages/OrderDetails/OrderDetails\";\nimport OrderDetailsAdd from \"./Pages/OrderDetails/OrderDetailsAdd\";\nimport OrderDetailsUpdate from \"./Pages/OrderDetails/OrderDetailsUpdate\";\n\n\nexport default function App() {\n\n\tconst [productToEdit, setProductToEdit] = useState();\n\tconst [addressToEdit, setAddressToEdit] = useState();\n\tconst [customerToEdit, setCustomerToEdit] = useState();\n\tconst [orderToEdit, setOrderToEdit] = useState();\n\tconst [orderDetailsToEdit, setOrderDetailsToEdit] = useState();\n\n\treturn (\n\t\t<div>\n\t\t\t<BrowserRouter>\n\t\t\t\t<HeaderComponent />\n\t\t\t\t<Routes>\n\t\t\t\t\t<Route path=\"/\" element={<Home />} />\n\t\t\t\t\t<Route path=\"/Customers\" element={<Customers\n\t\t\t\t\t\tcustomerToEdit={customerToEdit}\n\t\t\t\t\t\tsetCustomerToEdit={setCustomerToEdit} />} />\n\t\t\t\t\t<Route path=\"/CustomersAdd\" element={<CustomersAdd />} />\n\t\t\t\t\t<Route path=\"/CustomersUpdate\" element={<CustomersUpdate\n\t\t\t\t\t\tcustomerToEdit={customerToEdit} />} />\n\t\t\t\t\t<Route path=\"/Addresses\" element={<Addresses\n\t\t\t\t\t\taddressToEdit={addressToEdit}\n\t\t\t\t\t\tsetAddressToEdit={setAddressToEdit} />} />\n\t\t\t\t\t<Route path=\"/AddressesAdd\" element={<AddressesAdd />} />\n\t\t\t\t\t<Route path=\"/AddressesUpdate\" element={<AddressesUpdate\n\t\t\t\t\t\taddressToEdit={addressToEdit} />} />\n\t\t\t\t\t<Route path=\"/Orders\" element={<Orders\n\t\t\t\t\t\torderToEdit={orderToEdit}\n\t\t\t\t\t\tsetOrderToEdit={setOrderToEdit} />} />\n\t\t\t\t\t<Route path=\"/OrdersAdd\" element={<OrdersAdd />} />\n\t\t\t\t\t<Route path=\"/Products\" element={<Products\n\t\t\t\t\t\tproductToEdit={productToEdit}\n\t\t\t\t\t\tsetProductToEdit={setProductToEdit} />} />\n\t\t\t\t\t<Route path=\"/ProductsAdd\" element={<ProductsAdd />} />\n\t\t\t\t\t<Route path=\"/ProductsUpdate\" element={<ProductsUpdate\n\t\t\t\t\t\tproductToEdit={productToEdit} />} />\n\t\t\t\t\t<Route path=\"/OrderDetails\" element={<OrderDetails\n\t\t\t\t\t\torderDetailsToEdit={orderDetailsToEdit}\n\t\t\t\t\t\tsetOrderDetailsToEdit={setOrderDetailsToEdit} />} />\n\t\t\t\t\t<Route path=\"/OrderDetailsAdd\" element={<OrderDetailsAdd />} />\n\t\t\t\t\t<Route path=\"/OrderDetailsUpdate\" element={<OrderDetailsUpdate\n\t\t\t\t\t\torderDetailsToEdit={orderDetailsToEdit} />} />\n\t\t\t\t</Routes>\n\t\t\t\t<FooterComponent />\n\t\t\t</BrowserRouter>\n\t\t</div>\n\t)\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}