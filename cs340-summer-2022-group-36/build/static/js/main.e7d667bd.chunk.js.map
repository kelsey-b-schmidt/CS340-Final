{"version":3,"sources":["Components/Header-Footer/HeaderComponent.js","Pages/Home.js","Components/Customers/CustomerRowComponent.js","Components/Customers/CustomerTableComponent.js","Components/Customers/CustomerBrowseComponent.js","Pages/Customers/Customers.js","Components/Addresses/AddressRowComponent.js","Components/Addresses/AddressTableComponent.js","Components/Addresses/AddressBrowseComponent.js","Pages/Addresses/Addresses.js","Components/Orders/OrderRowComponent.js","Components/Orders/OrderTableComponent.js","Components/Orders/OrderBrowseComponent.js","Pages/Orders/Orders.js","Components/Products/ProductRowComponent.js","Components/Products/ProductTableComponent.js","Components/Products/ProductBrowseComponent.js","Pages/Products/Products.js","Pages/Products/ProductsAdd.js","Pages/Products/ProductsUpdate.js","Components/Header-Footer/FooterComponent.js","Components/Customers/CustomerIDDynamicSelectAddOptionComponent.js","Components/Customers/CustomerIDDynamicSelectAddComponent.js","Pages/Addresses/AddressesAdd.js","Components/Addresses/HandleBooleanActiveComponent.js","Components/Addresses/HandleBooleanPrimaryComponent.js","Pages/Addresses/AddressesUpdate.js","Pages/Customers/CustomersAdd.js","Pages/Customers/CustomersUpdate.js","Components/Addresses/AddressIDDynamicSelectAddOptionComponent.js","Components/Addresses/AddressIDDynamicSelectAddComponent.js","Pages/Orders/OrdersAdd.js","Components/OrderDetails/OrderDetailsRowComponent.js","Components/OrderDetails/OrderDetailsTableComponent.js","Components/OrderDetails/OrderDetailsBrowseComponent.js","Pages/OrderDetails/OrderDetails.js","Pages/OrderDetails/OrderDetailsAdd.js","Pages/OrderDetails/OrderDetailsUpdate.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderComponent","react_default","a","createElement","class","react_router_dom","to","Home","CustomerRowComponent","_ref","customer","setCustomerToEdit","navigate","useNavigate","customerID","customerName","email","phoneNumber","type","value","onClick","deleteCustomer","_ref2","Object","asyncToGenerator","_regeneratorRuntime","mark","_callee","newCustomerValues","response","wrap","_context","prev","next","action","fetch","method","body","JSON","stringify","headers","Content-Type","sent","json","request_received","alert","window","location","reload","stop","apply","this","arguments","confirm","catch","console","error","CustomerTableComponent","customers","colSpan","map","i","key","CustomerBrowseComponent","Customers","setCustomers","useEffect","Customers_regeneratorRuntime","responseJson","getCustomers","AddressRowComponent","address","setAddressToEdit","addressID","handleBoolean","input","disabled","checked","recipient","street","city","state","zip","isPrimary","isActive","deleteAddress","AddressRowComponent_regeneratorRuntime","newAddressValues","AddressTableComponent","addresses","AddressBrowseComponent","Addresses","setAddresses","Addresses_regeneratorRuntime","getAddresses","OrderRowComponent","order","orderID","setOrderToEdit","markShipped","markOrderShipped","OrderRowComponent_regeneratorRuntime","newDate","shipDateTime","newOrderValues","Date","getFullYear","getMonth","toString","padStart","getDate","join","getHours","getMinutes","getSeconds","onDelete","deleteOrders","_ref3","_callee2","_context2","shipButton","deleteButton","OrderTableComponent","orders","OrderBrowseComponent","Orders","setOrders","Orders_regeneratorRuntime","getOrders","ProductRowComponent","product","setProductToEdit","productID","productName","description","brand","weightVal","weightUnit","sellPrice","replenishCost","numberInStock","deleteProduct","ProductRowComponent_regeneratorRuntime","newProductValues","ProductTableComponent","products","ProductBrowseComponent","Products","setProducts","Products_regeneratorRuntime","getProducts","_useState","useState","_useState2","slicedToArray","setProductName","_useState3","_useState4","setDescription","_useState5","_useState6","setBrand","_useState7","_useState8","setWeightVal","_useState9","_useState10","setWeightUnit","_useState11","_useState12","setSellPrice","_useState13","_useState14","setReplenishCost","_useState15","_useState16","setNumberInStock","id","maxLength","onChange","e","target","title","step","min","max","selected","hidden","newProduct","ProductsAdd_regeneratorRuntime","productToEdit","productNameUpdate","setProductNameUpdate","descriptionUpdate","setDescriptionUpdate","brandUpdate","setBrandUpdate","weightValUpdate","setWeightValUpdate","weightUnitUpdate","setWeightUnitUpdate","sellPriceUpdate","setSellPriceUpdate","replenishCostUpdate","setReplenishCostUpdate","numberInStockUpdate","setNumberInStockUpdate","ProductsUpdate_regeneratorRuntime","FooterComponent","CustomerIDDynamicSelectAddOptionComponent","CustomerIDDynamicSelectAddComponent","setCustomerID","Address","AddressesAdd_regeneratorRuntime","setRecipient","setStreet","setCity","setState","setZip","setIsActive","setIsPrimary","replace","length","newAddress","HandleBooleanActiveComponent","isActiveUpdate","setIsActiveUpdate","handleActiveChange","HandleBooleanPrimaryComponent","isPrimaryUpdate","setIsPrimaryUpdate","handlePrimaryChange","addressToEdit","recipientUpdate","setRecipientUpdate","streetUpdate","setStreetUpdate","cityUpdate","setCityUpdate","stateUpdate","setStateUpdate","zipUpdate","setZipUpdate","AddressesUpdate_regeneratorRuntime","setCustomerName","setEmail","setPhoneNumber","newCustomer","CustomersAdd_regeneratorRuntime","customerToEdit","customerNameUpdate","setCustomerNameUpdate","emailUpdate","setEmailUpdate","phoneNumberUpdate","setPhoneNumberUpdate","placeholder","CustomersUpdate_regeneratorRuntime","AddressIDDynamicSelectAddOptionComponent","AddressIDDynamicSelectAddComponent","setAddressID","OrdersAdd_regeneratorRuntime","searchAddressValues","newAddressSearch","newOrder","_ref4","_callee3","_context3","OrderDetailsRowComponent","orderDetails","setOrderDetailsToEdit","odID","productQuantity","unitPrice","lineTotal","deleteOrderDetails","OrderDetailsRowComponent_regeneratorRuntime","newOrderDetailValues","OrderDetailsTableComponent","OrderDetailsBrowseComponent","setOrderDetails","OrderDetailsBrowseComponent_regeneratorRuntime","getResponse","OrderDetails","setOrderID","setProductID","setProductQuantity","setUnitPrice","Math","newOrderDetail","OrderDetailsAdd_regeneratorRuntime","orderDetailsToEdit","orderIDUpdate","setOrderIDUpdate","productIDUpdate","setProductIDUpdate","productQuantityUpdate","setProductQuantityUpdate","unitPriceUpdate","setUnitPriceUpdate","OrderDetailsUpdate_regeneratorRuntime","App","_useState17","_useState18","react_router","path","element","ProductsAdd_Products","ProductsUpdate_Products","AddressesUpdate_Address","CustomersAdd_Customers","CustomersUpdate_Customers","OrdersAdd_Orders","OrderDetailsAdd_OrderDetails","OrderDetailsUpdate_OrderDetails","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App_App"],"mappings":"mNAIe,SAASA,IAEpB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,MAAIC,MAAM,cACNH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,SACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,cAAT,cACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,cAAT,cACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,WAAT,WACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,aAAT,eCZL,SAASC,IAGpB,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,uDACAF,EAAAC,EAAAC,cAAA,+4MCNG,SAASK,EAATC,GACsB,IAA/BC,EAA+BD,EAA/BC,SAAUC,EAAqBF,EAArBE,kBAENC,EAAWC,cAEXC,EAAaJ,EAASI,WAkC5B,OACIb,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAKO,EAASI,YACdb,EAAAC,EAAAC,cAAA,UAAKO,EAASK,cACdd,EAAAC,EAAAC,cAAA,UAAKO,EAASM,OACdf,EAAAC,EAAAC,cAAA,UAAKO,EAASO,aACdhB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,SAASC,QAvC/B,WACbT,EAAkBD,GAClBE,EAAS,wBAuCLX,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,SAChBC,QAtCF,WACb,IAAMC,EAAc,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,IAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,IAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAGbL,EAAoB,CACtBM,OAHW,SAGHpB,cAJOiB,EAAAE,KAAA,EAMIE,MAAM,iBAAkB,CAC3CC,OAAQ,OACRC,KAAMC,KAAKC,UAAUX,GACrBY,QAAS,CAAEC,eAAgB,sBATZ,cAMbZ,EANaE,EAAAW,KAAAX,EAAAE,KAAA,EAWQJ,EAASc,OAXjB,OAYmB,YAZnBZ,EAAAW,KAYFE,kBACbC,MAAM,kEACNC,OAAOC,SAASC,QAAO,IAEvBH,MAAM,gDAhBS,wBAAAd,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,YAAA,GAmBLN,OAAOO,QAAQ,qEAE1BhC,IACKiC,MAAMC,QAAQC,YCnChB,SAASC,EAAThD,GACqB,IAA/BiD,EAA+BjD,EAA/BiD,UAAW/C,EAAoBF,EAApBE,kBACZ,OACIV,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,MAAIwD,QAAQ,KAAZ,aAGJ1D,EAAAC,EAAAC,cAAA,aACKuD,EAAUE,IAAI,SAAClD,EAAUmD,GAAX,OACX5D,EAAAC,EAAAC,cAACK,EAAD,CACIE,SAAUA,EACVoD,IAAKD,EACLlD,kBAAmBA,QClB5B,SAASoD,EAATtD,GAAiE,IAA/BiD,EAA+BjD,EAA/BiD,UAAW/C,EAAoBF,EAApBE,kBAExD,OACIV,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,mCACRF,EAAAC,EAAAC,cAACsD,EAAD,CACIC,UAAWA,EACX/C,kBAAmBA,sxMCJpB,SAASqD,EAATvD,GAAmE,IAA9CiD,EAA8CjD,EAA9CiD,UAAWO,EAAmCxD,EAAnCwD,aAActD,EAAqBF,EAArBE,kBAYzD,OAVAuD,oBAAU,YACY,eAAA5C,EAAAC,OAAAC,EAAA,EAAAD,CAAA4C,IAAAzC,KAAG,SAAAC,IAAA,IAAAE,EAAAuC,EAAA,OAAAD,IAAArC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACME,MAAM,kBADZ,cACXN,EADWE,EAAAW,KAAAX,EAAAE,KAAA,EAEUJ,EAASc,OAFnB,OAEXyB,EAFWrC,EAAAW,KAGjBuB,EAAaG,GAHI,wBAAArC,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,aAAA,EAKlBiB,GACKf,MAAMC,QAAQC,QACpB,IAGCvD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,iBAAgBL,EAAAC,EAAAC,cAAA,qCACzBF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4D,EAAD,CACIL,UAAWA,EACX/C,kBAAmBA,sxMCvBpB,SAAS2D,EAAT7D,GACkB,IAA5B8D,EAA4B9D,EAA5B8D,QAASC,EAAmB/D,EAAnB+D,iBAEJ5D,EAAWC,cAEX4D,EAAYF,EAAQE,UAoCpBC,EAAgB,SAACC,GACnB,OAAa,IAAVA,EACQ1E,EAAAC,EAAAC,cAAA,SAAOe,KAAK,WAAW0D,UAAQ,IAEvB,IAAVD,EACE1E,EAAAC,EAAAC,cAAA,SAAOe,KAAK,WAAW2D,SAAO,EAACD,UAAQ,SAD7C,GAKT,OACI3E,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAKoE,EAAQE,WACbxE,EAAAC,EAAAC,cAAA,UAAKoE,EAAQzD,YACbb,EAAAC,EAAAC,cAAA,UAAKoE,EAAQO,WACb7E,EAAAC,EAAAC,cAAA,UAAKoE,EAAQQ,QACb9E,EAAAC,EAAAC,cAAA,UAAKoE,EAAQS,MACb/E,EAAAC,EAAAC,cAAA,UAAKoE,EAAQU,OACbhF,EAAAC,EAAAC,cAAA,UAAKoE,EAAQW,KACbjF,EAAAC,EAAAC,cAAA,UAAKuE,EAAcH,EAAQY,YAC3BlF,EAAAC,EAAAC,cAAA,UAAKuE,EAAcH,EAAQa,WAC3BnF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,SAASC,QAvD/B,WACboD,EAAiBD,GACjB3D,EAAS,wBAuDLX,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,SACpBC,QAtDF,WACb,IAAMiE,EAAa,eAAA/D,EAAAC,OAAAC,EAAA,EAAAD,CAAA+D,IAAA5D,KAAG,SAAAC,IAAA,IAAA4D,EAAA1D,EAAA,OAAAyD,IAAAxD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAGZsD,EAAmB,CACrBrD,OAHW,SAGHuC,aAJM1C,EAAAE,KAAA,EAMKE,MAAM,iBAAkB,CAC3CC,OAAQ,OACRC,KAAMC,KAAKC,UAAUgD,GACrB/C,QAAS,CAACC,eAAgB,sBATZ,cAMZZ,EANYE,EAAAW,KAAAX,EAAAE,KAAA,EAWSJ,EAASc,OAXlB,OAYoB,YAZpBZ,EAAAW,KAYDE,kBACbC,MAAM,gEACNC,OAAOC,SAASC,QAAO,IAEvBH,MAAM,+CAhBQ,wBAAAd,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,YAAA,GAmBJN,OAAOO,QAAQ,oEAE1BgC,IACK/B,MAAM,SAAAE,GACHX,MAAM,iGCpCX,SAAS2C,EAAT/E,GACsB,IAA/BgF,EAA+BhF,EAA/BgF,UAAWjB,EAAoB/D,EAApB+D,iBACb,OACIvE,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,MAAIwD,QAAQ,KAAZ,WACA1D,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,MAAIwD,QAAQ,KAAZ,aAGR1D,EAAAC,EAAAC,cAAA,aACKsF,EAAU7B,IAAI,SAACW,EAASV,GAAV,OACX5D,EAAAC,EAAAC,cAACmE,EAAD,CACIC,QAASA,EACTT,IAAKD,EACLW,iBAAkBA,QCpB3B,SAASkB,EAATjF,GAAiE,IAA/BgF,EAA+BhF,EAA/BgF,UAAWjB,EAAoB/D,EAApB+D,iBAExD,OACIvE,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,mCACRF,EAAAC,EAAAC,cAACqF,EAAD,CACIC,UAAWA,EACXjB,iBAAkBA,sxMCJnB,SAASmB,EAATlF,GAAiE,IAA7CgF,EAA6ChF,EAA7CgF,UAAWG,EAAkCnF,EAAlCmF,aAAcpB,EAAoB/D,EAApB+D,iBAYxD,OAVAN,oBAAU,YACY,eAAA5C,EAAAC,OAAAC,EAAA,EAAAD,CAAAsE,IAAAnE,KAAG,SAAAC,IAAA,IAAAE,EAAAuC,EAAA,OAAAyB,IAAA/D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACME,MAAM,kBADZ,cACXN,EADWE,EAAAW,KAAAX,EAAAE,KAAA,EAEUJ,EAASc,OAFnB,OAEXyB,EAFWrC,EAAAW,KAGjBkD,EAAaxB,GAHI,wBAAArC,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,aAAA,EAKlB0C,GACKxC,MAAMC,QAAQC,QACpB,IAGCvD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,iBAAgBL,EAAAC,EAAAC,cAAA,oCACzBF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuF,EAAD,CACID,UAAWA,EACXjB,iBAAkBA,sxMCvBnB,SAASuB,EAATtF,GACgB,IAgFHkE,EAhFtBqB,EAAyBvF,EAAzBuF,MAIIC,GAJqBxF,EAAlByF,eAEQrF,cAEDmF,EAAMC,SAChBxB,EAAYuB,EAAMvB,UAWlB0B,EAAc,WAChB,IAAMC,EAAgB,eAAA9E,EAAAC,OAAAC,EAAA,EAAAD,CAAA8E,IAAA3E,KAAG,SAAAC,IAAA,IAAA2E,EAAAC,EAAAC,EAAA3E,EAAA,OAAAwE,IAAAvE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,aACN,SAETqE,EAAU,IAAIG,KACdF,EAAe,CAACD,EAAQI,eACzBJ,EAAQK,WAAW,GAAGC,WAAWC,SAAS,EAAG,KAC7CP,EAAQQ,UAAWF,WAAWC,SAAS,EAAG,MAAME,KAAK,KAAK,IAC3D,CAAET,EAAQU,WAAYJ,WAAWC,SAAS,EAAG,KAC5CP,EAAQW,aAAcL,WAAWC,SAAS,EAAG,KAC7CP,EAAQY,aAAcN,WAAWC,SAAS,EAAG,MAAME,KAAK,KAEvDP,EAAiB,CACnBtE,OAXW,SAWHuC,YAAW8B,eAAcN,WAZhBlE,EAAAE,KAAA,EAcEE,MAAM,cAAe,CACxCC,OAAQ,OACRC,KAAMC,KAAKC,UAAUiE,GACrBhE,QAAS,CAAEC,eAAgB,sBAjBV,cAcfZ,EAdeE,EAAAW,KAAAX,EAAAE,KAAA,EAmBMJ,EAASc,OAnBf,OAoBiB,YApBjBZ,EAAAW,KAoBJE,kBACbC,MAAM,yEACNC,OAAOC,SAASC,QAAO,IAEvBH,MAAM,mDAxBW,yBAAAd,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,YAAA,GA2BPN,OAAOO,QAAQ,2EAE1B+C,IACK9C,MAAMC,QAAQC,QAIrB2D,EAAW,WACb,IAAMC,EAAY,eAAAC,EAAA9F,OAAAC,EAAA,EAAAD,CAAA8E,IAAA3E,KAAG,SAAA4F,IAAA,IAAAd,EAAA3E,EAAA,OAAAwE,IAAAvE,KAAA,SAAAyF,GAAA,cAAAA,EAAAvF,KAAAuF,EAAAtF,MAAA,aACF,SAETuE,EAAiB,CACnBtE,OAHW,SAGH+D,WAJKsB,EAAAtF,KAAA,EAMME,MAAM,cAAe,CACxCC,OAAQ,OACRC,KAAMC,KAAKC,UAAUiE,GACrBhE,QAAS,CAAEC,eAAgB,sBATd,cAMXZ,EANW0F,EAAA7E,KAAA6E,EAAAtF,KAAA,EAWUJ,EAASc,OAXnB,OAYqB,YAZrB4E,EAAA7E,KAYAE,kBACbC,MAAM,+DACNC,OAAOC,SAASC,QAAO,IAEvBH,MAAM,6CAhBO,wBAAA0E,EAAAtE,SAAAqE,MAAH,yBAAAD,EAAAnE,MAAAC,KAAAC,YAAA,GAmBHN,OAAOO,QAAQ,kEAE1B+D,IACK9D,MAAM,SAAAE,GACHX,MAAM,6FAiCtB,OACI5C,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAK6F,EAAMC,SACXhG,EAAAC,EAAAC,cAAA,UAAK6F,EAAMlF,YACXb,EAAAC,EAAAC,cAAA,UAAK6F,EAAMvB,WACXxE,EAAAC,EAAAC,cAAA,UAhCU,QADMwE,EAiCIqB,EAAMO,cA/BnB,kBAGA5B,GA6BP1E,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,uBAE/BlB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,uBAE/BlB,EAAAC,EAAAC,cAAA,UA9BW,SAACwE,GAChB,OAAc,OAAVA,EACO1E,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,eAAeC,QAAS+E,IAGnDlG,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,eAAeyD,UAAQ,IAyBpD4C,CAAWxB,EAAMO,eACtBtG,EAAAC,EAAAC,cAAA,UAtBa,SAACwE,GAClB,OAAc,OAAVA,EACO1E,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,SAASC,QAAS+F,IAG7ClH,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,SAASyD,UAAQ,IAkB9C6C,CAAazB,EAAMO,gBC3HrB,SAASmB,EAATjH,GACiB,IAA1BkH,EAA0BlH,EAA1BkH,OAAQzB,EAAkBzF,EAAlByF,eACV,OACIjG,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,MAAIwD,QAAQ,KAAZ,aAGR1D,EAAAC,EAAAC,cAAA,aACKwH,EAAO/D,IAAI,SAACoC,EAAOnC,GAAR,OACR5D,EAAAC,EAAAC,cAAC4F,EAAD,CACIC,MAAOA,EACPlC,IAAKD,EACLqC,eAAgBA,QClBzB,SAAS0B,EAATnH,GAA0D,IAA1BkH,EAA0BlH,EAA1BkH,OAAQzB,EAAkBzF,EAAlByF,eAEnD,OACIjG,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,gCACRF,EAAAC,EAAAC,cAACuH,EAAD,CACIC,OAAQA,EACRzB,eAAgBA,sxMCJjB,SAAS2B,EAATpH,GAAuD,IAArCkH,EAAqClH,EAArCkH,OAAQG,EAA6BrH,EAA7BqH,UAAW5B,EAAkBzF,EAAlByF,eAYhD,OAVAhC,oBAAU,YACS,eAAA5C,EAAAC,OAAAC,EAAA,EAAAD,CAAAwG,IAAArG,KAAG,SAAAC,IAAA,IAAAE,EAAAuC,EAAA,OAAA2D,IAAAjG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSE,MAAM,eADf,cACRN,EADQE,EAAAW,KAAAX,EAAAE,KAAA,EAEaJ,EAASc,OAFtB,OAERyB,EAFQrC,EAAAW,KAGdoF,EAAU1D,GAHI,wBAAArC,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,aAAA,EAKf4E,GACK1E,MAAMC,QAAQC,QACpB,IAGCvD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,cAAaL,EAAAC,EAAAC,cAAA,kCACtBF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACyH,EAAD,CACID,OAAQA,EACRzB,eAAgBA,sxMCvBjB,SAAS+B,EAATxH,GACkB,IAA5ByH,EAA4BzH,EAA5ByH,QAASC,EAAmB1H,EAAnB0H,iBAEJvH,EAAWC,cAEXuH,EAAYF,EAAQE,UAkC1B,OACInI,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAK+H,EAAQE,WACbnI,EAAAC,EAAAC,cAAA,UAAK+H,EAAQG,aACbpI,EAAAC,EAAAC,cAAA,UAAK+H,EAAQI,aACbrI,EAAAC,EAAAC,cAAA,UAAK+H,EAAQK,OACbtI,EAAAC,EAAAC,cAAA,UAAK+H,EAAQM,WACbvI,EAAAC,EAAAC,cAAA,UAAK+H,EAAQO,YACbxI,EAAAC,EAAAC,cAAA,cAAM+H,EAAQQ,WACdzI,EAAAC,EAAAC,cAAA,cAAM+H,EAAQS,eACd1I,EAAAC,EAAAC,cAAA,UAAK+H,EAAQU,eACb3I,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,SAASC,QA5C/B,WACb+G,EAAiBD,GACjBtH,EAAS,uBA4CLX,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,SACpBC,QA3CF,WACb,IAAMyH,EAAa,eAAAvH,EAAAC,OAAAC,EAAA,EAAAD,CAAAuH,IAAApH,KAAG,SAAAC,IAAA,IAAAoH,EAAAlH,EAAA,OAAAiH,IAAAhH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAGZ8G,EAAmB,CACrB7G,OAHW,SAGHkG,aAJMrG,EAAAE,KAAA,EAMKE,MAAM,gBAAiB,CAC1CC,OAAQ,OACRC,KAAMC,KAAKC,UAAUwG,GACrBvG,QAAS,CAACC,eAAgB,sBATZ,cAMZZ,EANYE,EAAAW,KAAAX,EAAAE,KAAA,EAWSJ,EAASc,OAXlB,OAYoB,YAZpBZ,EAAAW,KAYDE,kBACbC,MAAM,gEACNC,OAAOC,SAASC,QAAO,IAEvBH,MAAM,+CAhBQ,wBAAAd,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,YAAA,GAmBJN,OAAOO,QAAQ,oEAE1BwF,IACKvF,MAAMC,QAAQC,YCnChB,SAASwF,EAATvI,GACmB,IAA7BwI,EAA6BxI,EAA7BwI,SAAUd,EAAmB1H,EAAnB0H,iBACX,OACIlI,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,MAAIwD,QAAQ,KAAZ,UACA1D,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,MAAIwD,QAAQ,KAAZ,aAGJ1D,EAAAC,EAAAC,cAAA,aACK8I,EAASrF,IAAI,SAACsE,EAASrE,GAAV,OACV5D,EAAAC,EAAAC,cAAC8H,EAAD,CACIC,QAASA,EACTpE,IAAKD,EACLsE,iBAAkBA,QCtB3B,SAASe,EAATzI,GAAgE,IAA9BwI,EAA8BxI,EAA9BwI,SAAUd,EAAoB1H,EAApB0H,iBAEvD,OACIlI,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,kCACRF,EAAAC,EAAAC,cAAC6I,EAAD,CACIC,SAAUA,EACVd,iBAAkBA,sxMCJnB,SAASgB,EAAT1I,GAA6D,IAA1CwI,EAA0CxI,EAA1CwI,SAAUG,EAAgC3I,EAAhC2I,YAAajB,EAAmB1H,EAAnB0H,iBAYrD,OAVAjE,oBAAU,YACW,eAAA5C,EAAAC,OAAAC,EAAA,EAAAD,CAAA8H,IAAA3H,KAAG,SAAAC,IAAA,IAAAE,EAAAuC,EAAA,OAAAiF,IAAAvH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACOE,MAAM,iBADb,cACVN,EADUE,EAAAW,KAAAX,EAAAE,KAAA,EAEWJ,EAASc,OAFpB,OAEVyB,EAFUrC,EAAAW,KAGhB0G,EAAYhF,GAHI,wBAAArC,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,aAAA,EAKjBkG,GACKhG,MAAMC,QAAQC,QACpB,IAGCvD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,gBAAeL,EAAAC,EAAAC,cAAA,oCACxBF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC+I,EAAD,CACID,SAAUA,EACVd,iBAAkBA,sxMCtBnB,SAASgB,IAEpB,IAAMvI,EAAWC,cAFc0I,EAIOC,mBAAS,IAJhBC,EAAAlI,OAAAmI,EAAA,EAAAnI,CAAAgI,EAAA,GAIxBlB,EAJwBoB,EAAA,GAIXE,EAJWF,EAAA,GAAAG,EAKOJ,mBAAS,IALhBK,EAAAtI,OAAAmI,EAAA,EAAAnI,CAAAqI,EAAA,GAKxBtB,EALwBuB,EAAA,GAKXC,EALWD,EAAA,GAAAE,EAMLP,mBAAS,IANJQ,EAAAzI,OAAAmI,EAAA,EAAAnI,CAAAwI,EAAA,GAMxBxB,EANwByB,EAAA,GAMjBC,EANiBD,EAAA,GAAAE,EAOGV,mBAAS,IAPZW,EAAA5I,OAAAmI,EAAA,EAAAnI,CAAA2I,EAAA,GAOxB1B,EAPwB2B,EAAA,GAObC,EAPaD,EAAA,GAAAE,EAQKb,mBAAS,IARdc,EAAA/I,OAAAmI,EAAA,EAAAnI,CAAA8I,EAAA,GAQxB5B,EARwB6B,EAAA,GAQZC,EARYD,EAAA,GAAAE,EASGhB,mBAAS,IATZiB,EAAAlJ,OAAAmI,EAAA,EAAAnI,CAAAiJ,EAAA,GASxB9B,EATwB+B,EAAA,GASbC,EATaD,EAAA,GAAAE,EAUWnB,mBAAS,IAVpBoB,EAAArJ,OAAAmI,EAAA,EAAAnI,CAAAoJ,EAAA,GAUxBhC,EAVwBiC,EAAA,GAUTC,EAVSD,EAAA,GAAAE,EAWWtB,mBAAS,IAXpBuB,EAAAxJ,OAAAmI,EAAA,EAAAnI,CAAAuJ,EAAA,GAWxBlC,EAXwBmC,EAAA,GAWTC,EAXSD,EAAA,GAuE/B,OACI9K,EAAAC,EAAAC,cAAA,YAAUC,MAAM,QACZH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,oCACRF,EAAAC,EAAAC,cAAA,8BACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACL+J,GAAG,cACHC,UAAU,MACV/J,MAAOkH,EACP8C,SAAU,SAAAC,GAAC,OAAIzB,EAAeyB,EAAEC,OAAOlK,UAClDlB,EAAAC,EAAAC,cAAA,6BACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACL+J,GAAG,cACHC,UAAU,OACV/J,MAAOmH,EACP6C,SAAU,SAAAC,GAAC,OAAItB,EAAesB,EAAEC,OAAOlK,UAClDlB,EAAAC,EAAAC,cAAA,uBACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACL+J,GAAG,QACHC,UAAU,MACV/J,MAAOoH,EACP4C,SAAU,SAAAC,GAAC,OAAInB,EAASmB,EAAEC,OAAOlK,UAC5ClB,EAAAC,EAAAC,cAAA,8BACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACL+J,GAAG,YACHK,MAAM,iGACNC,KAAK,OACLC,IAAI,IACJC,IAAI,QACJtK,MAAOqH,EACP2C,SAAU,SAAAC,GAAC,OAAIhB,EAAagB,EAAEC,OAAOlK,UAC5ClB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,6BACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQ8K,GAAG,aAAaE,SAAU,SAAAC,GAAC,OAAIb,EAAca,EAAEC,OAAOlK,SAC1DlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,OAAOuK,UAAQ,EAAC9G,UAAQ,EAAC+G,QAAM,GAA7C,UACA1L,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,OAAd,OACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,OAEJlB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,4BACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACL+J,GAAG,YACHK,MAAM,yCACNC,KAAK,OACLC,IAAI,IACJC,IAAI,QACJtK,MAAOuH,EACPyC,SAAU,SAAAC,GAAC,OAAIV,EAAaU,EAAEC,OAAOlK,UAC5ClB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,gCACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACL+J,GAAG,iBACHK,MAAM,0EACNC,KAAK,OACLC,IAAI,IACJC,IAAI,QACJtK,MAAOwH,EACPwC,SAAU,SAAAC,GAAC,OAAIP,EAAiBO,EAAEC,OAAOlK,UAChDlB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,iCACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACL+J,GAAG,kBACHO,IAAI,IACJC,IAAI,QACJtK,MAAOyH,EACPuC,SAAU,SAAAC,GAAC,OAAIJ,EAAiBI,EAAEC,OAAOlK,UAChDlB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,UAAQiB,QAxHK,WACjB,GAAoB,KAAhBiH,GAAsC,KAAhBC,GAA+B,KAAVC,GAC1B,KAAdC,GAAkC,KAAfC,GAAkC,KAAdC,GACrB,KAAlBC,GAAyC,KAAlBC,EAC1B/F,MAAM,wDAEL,GAAI2F,EAAY,GAAKE,EAAY,GAAKC,EAAgB,GAAKC,EAAgB,EAC5E/F,MAAM,8EAEL,GAAI2F,EAAY,KAASE,EAAY,KAASC,EAAgB,KAASC,EAAgB,IACxF/F,MAAM,uFAEL,CACD,IACM+I,EAAU,eAAAnL,EAAAc,OAAAC,EAAA,EAAAD,CAAAsK,IAAAnK,KAAG,SAAAC,IAAA,IAAAoH,EAAAlH,EAAA,OAAAgK,IAAA/J,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACT8G,EAAmB,CACrB7G,OAHO,MAIPmG,cACAC,cACAC,QACAC,YACAC,aACAC,YACAC,gBACAC,iBAVW7G,EAAAE,KAAA,EAYQE,MAAM,gBAAiB,CAC1CC,OAAQ,OACRC,KAAMC,KAAKC,UAAUwG,GACrBvG,QAAS,CAACC,eAAgB,sBAff,cAYTZ,EAZSE,EAAAW,KAAAX,EAAAE,KAAA,EAiBYJ,EAASc,OAjBrB,OAkBuB,YAlBvBZ,EAAAW,KAkBEE,kBACbC,MAAM,qFACNjC,EAAS,cAETiC,MAAM,gEAtBK,wBAAAd,EAAAkB,SAAAtB,MAAH,yBAAAlB,EAAAyC,MAAAC,KAAAC,YAAA,GAyBDN,OAAOO,QAAQ,qFAE1BuI,IACKtI,MAAMC,QAAQC,UA8EvB,UACAvD,EAAAC,EAAAC,cAAA,UAAQiB,QApII,WAChBuI,EAAe,IACfG,EAAe,IACfG,EAAS,IACTG,EAAa,IACbG,EAAc,IACdG,EAAa,IACbG,EAAiB,IACjBG,EAAiB,MA4Hb,SACA/K,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,aAAYL,EAAAC,EAAAC,cAAA,2yMClJlB,SAASgJ,EAAT1I,GAAmC,IAAhBqL,EAAgBrL,EAAhBqL,cAGxBlL,EAAWC,cAH6B0I,EAKIC,mBAASsC,EAAczD,aAL3BoB,EAAAlI,OAAAmI,EAAA,EAAAnI,CAAAgI,EAAA,GAKvCwC,EALuCtC,EAAA,GAKpBuC,EALoBvC,EAAA,GAAAG,EAMIJ,mBAASsC,EAAcxD,aAN3BuB,EAAAtI,OAAAmI,EAAA,EAAAnI,CAAAqI,EAAA,GAMvCqC,EANuCpC,EAAA,GAMpBqC,EANoBrC,EAAA,GAAAE,EAORP,mBAASsC,EAAcvD,OAPfyB,EAAAzI,OAAAmI,EAAA,EAAAnI,CAAAwI,EAAA,GAOvCoC,EAPuCnC,EAAA,GAO1BoC,EAP0BpC,EAAA,GAAAE,EAQAV,mBAASsC,EAActD,WARvB2B,EAAA5I,OAAAmI,EAAA,EAAAnI,CAAA2I,EAAA,GAQvCmC,EARuClC,EAAA,GAQtBmC,EARsBnC,EAAA,GAAAE,EASEb,mBAASsC,EAAcrD,YATzB6B,EAAA/I,OAAAmI,EAAA,EAAAnI,CAAA8I,EAAA,GASvCkC,EATuCjC,EAAA,GASrBkC,EATqBlC,EAAA,GAAAE,EAUAhB,mBAASsC,EAAcpD,WAVvB+B,EAAAlJ,OAAAmI,EAAA,EAAAnI,CAAAiJ,EAAA,GAUvCiC,EAVuChC,EAAA,GAUtBiC,EAVsBjC,EAAA,GAAAE,EAWQnB,mBAASsC,EAAcnD,eAX/BiC,EAAArJ,OAAAmI,EAAA,EAAAnI,CAAAoJ,EAAA,GAWvCgC,EAXuC/B,EAAA,GAWlBgC,EAXkBhC,EAAA,GAAAE,EAYQtB,mBAASsC,EAAclD,eAZ/BmC,EAAAxJ,OAAAmI,EAAA,EAAAnI,CAAAuJ,EAAA,GAYvC+B,EAZuC9B,EAAA,GAYlB+B,EAZkB/B,EAAA,GA0E9C,OACI9K,EAAAC,EAAAC,cAAA,YAAUC,MAAM,QACZH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,iCACRF,EAAAC,EAAAC,cAAA,4BACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACL+J,GAAG,YACH9J,MAAO2K,EAAc1D,UAAWxD,UAAQ,IACnD3E,EAAAC,EAAAC,cAAA,8BACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACL+J,GAAG,cACHC,UAAU,MACV/J,MAAO4K,EACPZ,SAAU,SAAAC,GAAC,OAAIY,EAAqBZ,EAAEC,OAAOlK,UACxDlB,EAAAC,EAAAC,cAAA,6BACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACL+J,GAAG,cACHC,UAAU,OACV/J,MAAO8K,EACPd,SAAU,SAAAC,GAAC,OAAIc,EAAqBd,EAAEC,OAAOlK,UACxDlB,EAAAC,EAAAC,cAAA,uBACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACL+J,GAAG,QACHC,UAAU,MACV/J,MAAOgL,EACPhB,SAAU,SAAAC,GAAC,OAAIgB,EAAehB,EAAEC,OAAOlK,UAClDlB,EAAAC,EAAAC,cAAA,8BACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACL+J,GAAG,YACHK,MAAM,iGACNC,KAAK,OACLC,IAAI,IACJC,IAAI,QACJtK,MAAOkL,EACPlB,SAAU,SAAAC,GAAC,OAAIkB,EAAmBlB,EAAEC,OAAOlK,UAClDlB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,6BACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQ8K,GAAG,aAAaE,SAAU,SAAAC,GAAC,OAAIoB,EAAoBpB,EAAEC,OAAOlK,SAChElB,EAAAC,EAAAC,cAAA,UAAQgB,MAAOoL,EAAkBb,UAAQ,EAAC9G,UAAQ,EAAC+G,QAAM,GAAEY,GAC3DtM,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,OAAd,OACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,OAEJlB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,4BACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACL+J,GAAG,YACHK,MAAM,yCACNC,KAAK,OACLC,IAAI,IACJC,IAAI,QACJtK,MAAOsL,EACPtB,SAAU,SAAAC,GAAC,OAAIsB,EAAmBtB,EAAEC,OAAOlK,UAClDlB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,gCACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACL+J,GAAG,iBACHK,MAAM,0EACNC,KAAK,OACLC,IAAI,IACJC,IAAI,QACJtK,MAAOwL,EACPxB,SAAU,SAAAC,GAAC,OAAIwB,EAAuBxB,EAAEC,OAAOlK,UACtDlB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,iCACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACL+J,GAAG,kBACHO,IAAI,IACJC,IAAI,QACJtK,MAAO0L,EACP1B,SAAU,SAAAC,GAAC,OAAI0B,EAAuB1B,EAAEC,OAAOlK,UACtDlB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,UAAQiB,QA9HK,WACjB,GAA0B,KAAtB2K,GAAkD,KAAtBE,GAA2C,KAAhBE,GAChC,KAApBE,GAA6C,KAApBE,GAA6C,KAApBE,GAC1B,KAAxBE,GAAqD,KAAxBE,EAChChK,MAAM,wDAEL,GAAIwJ,EAAkB,GAAKI,EAAkB,GAAKE,EAAsB,GAAKE,EAAsB,EACpGhK,MAAM,8EAEL,GAAIwJ,EAAkB,KAASI,EAAkB,KAASE,EAAsB,KAASE,EAAsB,IAChHhK,MAAM,uFAEL,CACD,IACMuF,EAAY0D,EAAc1D,UAC1BwD,EAAU,eAAAtK,EAAAC,OAAAC,EAAA,EAAAD,CAAAwL,IAAArL,KAAG,SAAAC,IAAA,IAAAoH,EAAAlH,EAAA,OAAAkL,IAAAjL,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACT8G,EAAmB,CACrB7G,OAJO,SAKP6J,oBACAE,oBACAE,cACAE,kBACAE,mBACAE,kBACAE,sBACAE,sBACAzE,aAXWrG,EAAAE,KAAA,EAaQE,MAAM,gBAAiB,CAC1CC,OAAQ,OACRC,KAAMC,KAAKC,UAAUwG,GACrBvG,QAAS,CAACC,eAAgB,sBAhBf,cAaTZ,EAbSE,EAAAW,KAAAX,EAAAE,KAAA,EAkBYJ,EAASc,OAlBrB,OAmBuB,YAnBvBZ,EAAAW,KAmBEE,kBACbC,MAAM,uFACNjC,EAAS,cAETiC,MAAM,mEAvBK,wBAAAd,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,YAAA,GA0BDN,OAAOO,QAAQ,oFAE1BuI,IACKtI,MAAMC,QAAQC,UAkFvB,UACAvD,EAAAC,EAAAC,cAAA,UAAQiB,QA1II,WAChB4K,EAAqBF,EAAczD,aACnC6D,EAAqBJ,EAAcxD,aACnC8D,EAAeN,EAAcvD,OAC7B+D,EAAmBR,EAActD,WACjCgE,EAAoBV,EAAcrD,YAClCiE,EAAmBZ,EAAcpD,WACjCkE,EAAuBd,EAAcnD,eACrCmE,EAAuBhB,EAAclD,iBAkIjC,SACA3I,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,aAAYL,EAAAC,EAAAC,cAAA,0BC3JlB,SAAS6M,IACpB,OACI/M,EAAAC,EAAAC,cAAA,+FCFO,SAAS8M,EAATxM,GACG,IAAZC,EAAYD,EAAZC,SAEF,OACAT,EAAAC,EAAAC,cAAA,UAAQgB,MAAOT,EAASI,YAAaJ,EAASI,WAA9C,MAA6DJ,EAASK,cCH3D,SAASmM,EAATzM,GACiB,IAA3BiD,EAA2BjD,EAA3BiD,UAAWyJ,EAAgB1M,EAAhB0M,cAEZ,OACIlN,EAAAC,EAAAC,cAAA,UAAQ8K,GAAG,aAAaE,SAAU,SAAAC,GAAC,OAAI+B,EAAc/B,EAAEC,OAAOlK,SAC1DlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,OAAOuK,UAAQ,EAAC9G,UAAQ,EAAC+G,QAAM,GAA7C,UACCjI,EAAUE,IAAI,SAAClD,EAAUmD,GAAX,OACX5D,EAAAC,EAAAC,cAAC8M,EAAD,CACIvM,SAAUA,EACVoD,IAAKD,wxMCNV,SAASuJ,EAAT3M,GAA8C,IAA3BiD,EAA2BjD,EAA3BiD,UAAWO,EAAgBxD,EAAhBwD,aAEzCC,oBAAU,YACY,eAAA5C,EAAAC,OAAAC,EAAA,EAAAD,CAAA8L,IAAA3L,KAAG,SAAAC,IAAA,IAAAE,EAAAuC,EAAA,OAAAiJ,IAAAvL,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACME,MAAM,kBADZ,cACXN,EADWE,EAAAW,KAAAX,EAAAE,KAAA,EAEUJ,EAASc,OAFnB,OAEXyB,EAFWrC,EAAAW,KAGjBuB,EAAaG,GAHI,wBAAArC,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,aAAA,EAKlBiB,GACKf,MAAMC,QAAQC,QACpB,IAEH,IAAM5C,EAAWC,cAZwC0I,EAcrBC,mBAAS,IAdYC,EAAAlI,OAAAmI,EAAA,EAAAnI,CAAAgI,EAAA,GAclDzI,EAdkD2I,EAAA,GActC0D,EAdsC1D,EAAA,GAAAG,EAevBJ,mBAAS,IAfcK,EAAAtI,OAAAmI,EAAA,EAAAnI,CAAAqI,EAAA,GAelD9E,EAfkD+E,EAAA,GAevCyD,EAfuCzD,EAAA,GAAAE,EAgB7BP,mBAAS,IAhBoBQ,EAAAzI,OAAAmI,EAAA,EAAAnI,CAAAwI,EAAA,GAgBlDhF,EAhBkDiF,EAAA,GAgB1CuD,EAhB0CvD,EAAA,GAAAE,EAiBjCV,mBAAS,IAjBwBW,EAAA5I,OAAAmI,EAAA,EAAAnI,CAAA2I,EAAA,GAiBlDlF,EAjBkDmF,EAAA,GAiB5CqD,EAjB4CrD,EAAA,GAAAE,EAkB/Bb,mBAAS,IAlBsBc,EAAA/I,OAAAmI,EAAA,EAAAnI,CAAA8I,EAAA,GAkBlDpF,EAlBkDqF,EAAA,GAkB3CmD,EAlB2CnD,EAAA,GAAAE,EAmBnChB,mBAAS,IAnB0BiB,EAAAlJ,OAAAmI,EAAA,EAAAnI,CAAAiJ,EAAA,GAmBlDtF,EAnBkDuF,EAAA,GAmB7CiD,EAnB6CjD,EAAA,GAAAE,EAoBzBnB,mBAAS,GApBgBoB,EAAArJ,OAAAmI,EAAA,EAAAnI,CAAAoJ,EAAA,GAoBlDvF,EApBkDwF,EAAA,GAoBxC+C,EApBwC/C,EAAA,GAAAE,EAqBvBtB,mBAAS,GArBcuB,EAAAxJ,OAAAmI,EAAA,EAAAnI,CAAAuJ,EAAA,GAqBlD3F,EArBkD4F,EAAA,GAqBvC6C,EArBuC7C,EAAA,GAmGzD,OACI9K,EAAAC,EAAAC,cAAA,YAAUC,MAAM,QACZH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,oCACRF,EAAAC,EAAAC,cAAA,6BACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC+M,EAAD,CACIxJ,UAAWA,EACXyJ,cAAeA,IAEnBlN,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,2BACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,YACHK,MAAM,kDACNJ,UAAU,MACV/J,MAAO2D,EACPqG,SAAU,SAAAC,GAAC,OAAIkC,EAAalC,EAAEC,OAAOlK,UAC7ClB,EAAAC,EAAAC,cAAA,wBACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,SACHK,MAAM,2EACNJ,UAAU,MACV/J,MAAO4D,EACPoG,SAAU,SAAAC,GAAC,OAAImC,EAAUnC,EAAEC,OAAOlK,UACtClB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,sBACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,OACHC,UAAU,MACV/J,MAAO6D,EACPmG,SAAU,SAAAC,GAAC,OAAIoC,EAAQpC,EAAEC,OAAOlK,UACpClB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,uBACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQ8K,GAAG,QACHE,SAAU,SAAAC,GAAC,OAAIqC,EAASrC,EAAEC,OAAOlK,SACrClB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,OAAOuK,UAAQ,EAAC9G,UAAQ,EAAC+G,QAAM,GAA7C,UACA1L,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,UACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,kBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,cACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,eACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,wBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,QACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,UACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,SACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,QACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,UACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,aACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,SACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,iBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,aACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,eACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,UACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,iBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,cACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,cACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,kBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,gBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,4BACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,QACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,UACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,gBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,eACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,gBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,kBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,gBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,aACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,SACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,qBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,QACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,kBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,cACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,iBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,aACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YAEJlB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,qBACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,MACHK,MAAM,gDACNJ,UAAU,KACV/J,MAAO+D,EACPiG,SA1KG,SAACC,GAChB,IAAMjK,EAAQiK,EAAEC,OAAOlK,MAAM0M,QAAQ,MAAO,IAC5CH,EAAOvM,MAyKClB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,2BACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,WACL+J,GAAG,YACHE,SAlKS,WACP,IAAdhG,EACCyI,EAAa,GAEM,IAAdzI,GACLyI,EAAa,MA8JT3N,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,0BACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,WACR+J,GAAG,WACHE,SAjLW,WACP,IAAb/F,EACCuI,EAAY,GAEM,IAAbvI,GACLuI,EAAY,MA6KR1N,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,UAAQiB,QAlKK,WACjB,GAAmB,KAAfN,GAAmC,KAAdgE,GAA+B,KAAXC,GAA0B,KAATC,GAC7C,KAAVC,GAAwB,KAARC,EACnBrC,MAAM,wDAEL,GAAmB,IAAfqC,EAAI4I,OACTjL,MAAM,8DAEL,CACD,IACMkL,EAAU,eAAA1G,EAAA9F,OAAAC,EAAA,EAAAD,CAAA8L,IAAA3L,KAAG,SAAA4F,IAAA,IAAA/B,EAAA1D,EAAA,OAAAwL,IAAAvL,KAAA,SAAAyF,GAAA,cAAAA,EAAAvF,KAAAuF,EAAAtF,MAAA,cACTsD,EAAmB,CACrBrD,OAHO,MAIPpB,aACAgE,YACAC,SACAC,OACAC,QACAC,MACAE,WACAD,aAVWoC,EAAAtF,KAAA,EAYQE,MAAM,iBAAkB,CAC3CC,OAAQ,OACRC,KAAMC,KAAKC,UAAUgD,GACrB/C,QAAS,CAAEC,eAAgB,sBAfhB,cAYTZ,EAZS0F,EAAA7E,KAAA6E,EAAAtF,KAAA,EAiBYJ,EAASc,OAjBrB,OAkBuB,YAlBvB4E,EAAA7E,KAkBEE,kBACbC,MAAM,sFACNjC,EAAS,eAETiC,MAAM,gEAtBK,wBAAA0E,EAAAtE,SAAAqE,MAAH,yBAAAD,EAAAnE,MAAAC,KAAAC,YAAA,GAyBDN,OAAOO,QAAQ,qFAE1B0K,IACKzK,MAAMC,QAAQC,UA4HvB,UACAvD,EAAAC,EAAAC,cAAA,UAAQiB,QApMI,WAChBkM,EAAa,IACbC,EAAU,IACVC,EAAQ,IACRC,EAAS,IACTC,EAAO,IACPC,EAAY,GACZC,EAAa,KA6LT,SACA3N,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,cAAaL,EAAAC,EAAAC,cAAA,0BChOnB,SAAS6N,EAATvN,GAC4B,IAArCwN,EAAqCxN,EAArCwN,eAAgBC,EAAqBzN,EAArByN,kBAEZC,EAAqB,WACD,IAAnBF,EACCC,EAAkB,GAEM,IAAnBD,GACLC,EAAkB,IAI1B,OAAsB,IAAnBD,EACQhO,EAAAC,EAAAC,cAAA,SAAOe,KAAK,WACL+J,GAAG,WACHE,SAAU,SAAAC,GAAC,OAAI+C,OAEN,IAAlBF,EACEhO,EAAAC,EAAAC,cAAA,SAAOe,KAAK,WACL+J,GAAG,WACHpG,SAAO,EACPsG,SAAU,SAAAC,GAAC,OAAI+C,YAJ5B,ECjBM,SAASC,EAAT3N,GAC8B,IAAvC4N,EAAuC5N,EAAvC4N,gBAAiBC,EAAsB7N,EAAtB6N,mBAEbC,EAAsB,WACD,IAApBF,EACCC,EAAmB,GAEM,IAApBD,GACLC,EAAmB,IAI3B,OAAuB,IAApBD,EACQpO,EAAAC,EAAAC,cAAA,SAAOe,KAAK,WACL+J,GAAG,YACHE,SAAU,SAAAC,GAAC,OAAImD,OAEL,IAAnBF,EACEpO,EAAAC,EAAAC,cAAA,SAAOe,KAAK,WACL+J,GAAG,YACHpG,SAAO,EACPsG,SAAU,SAAAC,GAAC,OAAImD,YAJ5B,mxMCbM,SAASnB,EAAT3M,GAAoC,IAAjB+N,EAAiB/N,EAAjB+N,cAExB5N,EAAWC,cAF8B0I,EAIDC,mBAASgF,EAAc1J,WAJtB2E,EAAAlI,OAAAmI,EAAA,EAAAnI,CAAAgI,EAAA,GAIxCkF,EAJwChF,EAAA,GAIvBiF,EAJuBjF,EAAA,GAAAG,EAKPJ,mBAASgF,EAAczJ,QALhB8E,EAAAtI,OAAAmI,EAAA,EAAAnI,CAAAqI,EAAA,GAKxC+E,EALwC9E,EAAA,GAK1B+E,EAL0B/E,EAAA,GAAAE,EAMXP,mBAASgF,EAAcxJ,MANZgF,EAAAzI,OAAAmI,EAAA,EAAAnI,CAAAwI,EAAA,GAMxC8E,EANwC7E,EAAA,GAM5B8E,EAN4B9E,EAAA,GAAAE,EAOTV,mBAASgF,EAAcvJ,OAPdkF,EAAA5I,OAAAmI,EAAA,EAAAnI,CAAA2I,EAAA,GAOxC6E,EAPwC5E,EAAA,GAO3B6E,EAP2B7E,EAAA,GAAAE,EAQbb,mBAASgF,EAActJ,KARVoF,EAAA/I,OAAAmI,EAAA,EAAAnI,CAAA8I,EAAA,GAQxC4E,EARwC3E,EAAA,GAQ7B4E,EAR6B5E,EAAA,GAAAE,EASHhB,mBAASgF,EAAcpJ,UATpBqF,EAAAlJ,OAAAmI,EAAA,EAAAnI,CAAAiJ,EAAA,GASxCyD,EATwCxD,EAAA,GASxByD,EATwBzD,EAAA,GAAAE,EAUDnB,mBAASgF,EAAcrJ,WAVtByF,EAAArJ,OAAAmI,EAAA,EAAAnI,CAAAoJ,EAAA,GAUxC0D,EAVwCzD,EAAA,GAUvB0D,EAVuB1D,EAAA,GAwE/C,OACI3K,EAAAC,EAAAC,cAAA,YAAUC,MAAM,QACZH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,iCACRF,EAAAC,EAAAC,cAAA,4BACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,YACH9J,MAAOqN,EAAc/J,UAAWG,UAAQ,IAChD3E,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACL+J,GAAG,aACH9J,MAAOqN,EAAc1N,WAAY8D,UAAQ,IAChD3E,EAAAC,EAAAC,cAAA,2BACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,YACHK,MAAM,kDACNJ,UAAU,MACV/J,MAAOsN,EACPtD,SAAU,SAAAC,GAAC,OAAIsD,EAAmBtD,EAAEC,OAAOlK,UACnDlB,EAAAC,EAAAC,cAAA,wBACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,SACHK,MAAM,2EACNJ,UAAU,MACV/J,MAAOwN,EACPxD,SAAU,SAAAC,GAAC,OAAIwD,EAAgBxD,EAAEC,OAAOlK,UAC5ClB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,sBACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,OACHC,UAAU,MACV/J,MAAO0N,EACP1D,SAAU,SAAAC,GAAC,OAAI0D,EAAc1D,EAAEC,OAAOlK,UAC1ClB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,uBACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQ8K,GAAG,QACHE,SAAU,SAAAC,GAAC,OAAI4D,EAAe5D,EAAEC,OAAOlK,SAC3ClB,EAAAC,EAAAC,cAAA,UAAQgB,MAAO4N,EAAarD,UAAQ,EAAC9G,UAAQ,EAAC+G,QAAM,GAAEoD,GACtD9O,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,UACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,kBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,cACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,eACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,wBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,QACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,UACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,SACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,QACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,UACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,aACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,SACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,iBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,aACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,eACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,UACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,iBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,cACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,cACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,kBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,gBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,4BACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,QACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,UACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,gBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,eACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,gBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,kBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,gBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,aACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,SACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,qBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,QACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,kBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,cACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,iBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,aACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YAEJlB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,qBACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,MACAK,MAAM,gDACTJ,UAAU,KACV/J,MAAO8N,EACP9D,SA3JG,SAACC,GAChB,IAAMjK,EAAQiK,EAAEC,OAAOlK,MAAM0M,QAAQ,MAAO,IAC5CqB,EAAa/N,MA0JLlB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,yBACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiO,EAAD,CACIC,gBAAiBA,EACjBC,mBAAoBA,IAExBrO,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,wBACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC6N,EAAD,CACIC,eAAgBA,EAChBC,kBAAmBA,IAEvBjO,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,UAAQiB,QAvKK,WACjB,GAAwB,KAApBqN,GAA2C,KAAjBE,GAAsC,KAAfE,GAC9B,KAAhBE,GAAoC,KAAdE,EACzBpM,MAAM,6BAEL,GAAyB,IAArBoM,EAAUnB,OACfjL,MAAM,8DAEL,CACD,IACM4B,EAAY+J,EAAc/J,UAC1BsJ,EAAU,eAAAzM,EAAAC,OAAAC,EAAA,EAAAD,CAAA4N,IAAAzN,KAAG,SAAAC,IAAA,IAAA4D,EAAA1D,EAAA,OAAAsN,IAAArN,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACTsD,EAAmB,CACrBrD,OAJO,SAKPuM,kBACAE,eACAE,aACAE,cACAE,YACAZ,kBACAJ,iBACAxJ,aAVW1C,EAAAE,KAAA,EAYQE,MAAM,iBAAkB,CAC3CC,OAAQ,OACRC,KAAMC,KAAKC,UAAUgD,GACrB/C,QAAS,CAAEC,eAAgB,sBAfhB,cAYTZ,EAZSE,EAAAW,KAAAX,EAAAE,KAAA,EAiBYJ,EAASc,OAjBrB,OAkBuB,YAlBvBZ,EAAAW,KAkBEE,kBACbC,MAAM,wFACNjC,EAAS,cACTkC,OAAOC,SAASC,UAEhBH,MAAM,mEAvBK,wBAAAd,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,YAAA,GA0BDN,OAAOO,QAAQ,oFAE1B0K,IACKzK,MAAMC,QAAQC,UA+HvB,UACAvD,EAAAC,EAAAC,cAAA,UAAQiB,QAvLI,WAChBsN,EAAmBF,EAAc1J,WACjC8J,EAAgBJ,EAAczJ,QAC9B+J,EAAcN,EAAcxJ,MAC5BgK,EAAeR,EAAcvJ,OAC7BiK,EAAaV,EAActJ,KAC3BgJ,EAAkBM,EAAcpJ,UAChCkJ,EAAmBE,EAAcrJ,aAgL7B,SACAlF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,cAAaL,EAAAC,EAAAC,cAAA,2yMCtMnB,SAAS6D,IAEpB,IAAMpD,EAAWC,cAFe0I,EAIQC,mBAAS,IAJjBC,EAAAlI,OAAAmI,EAAA,EAAAnI,CAAAgI,EAAA,GAIzBxI,EAJyB0I,EAAA,GAIX2F,EAJW3F,EAAA,GAAAG,EAKNJ,mBAAS,IALHK,EAAAtI,OAAAmI,EAAA,EAAAnI,CAAAqI,EAAA,GAKzB5I,EALyB6I,EAAA,GAKlBwF,EALkBxF,EAAA,GAAAE,EAMMP,mBAAS,IANfQ,EAAAzI,OAAAmI,EAAA,EAAAnI,CAAAwI,EAAA,GAMzB9I,EANyB+I,EAAA,GAMZsF,EANYtF,EAAA,GAwDhC,OACI/J,EAAAC,EAAAC,cAAA,YAAUC,MAAM,QACZH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,qCACRF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,eACHC,UAAU,MACV/J,MAAOJ,EACPoK,SAAU,SAAAC,GAAC,OAAIgE,EAAgBhE,EAAEC,OAAOlK,UAC5ClB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,QACR+J,GAAG,QACHC,UAAU,MACV/J,MAAOH,EACPsK,MAAM,mDACNH,SAAU,SAAAC,GAAC,OAAIiE,EAASjE,EAAEC,OAAOlK,UACrClB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,cACH9J,MAAOF,EACPiK,UAAU,KACVI,MAAM,4CACNH,SAnEgB,SAACC,GACzB,IAAMjK,EAAQiK,EAAEC,OAAOlK,MAAM0M,QAAQ,wBAAyB,YAC9DyB,EAAenO,MAkEXlB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQiB,QAjEK,WACjB,GAAqB,KAAjBL,GAAiC,KAAVC,GAAgC,KAAhBC,EACvC4B,MAAM,wDAEL,GAA2B,KAAvB5B,EAAY6M,OACjBjL,MAAM,2EAEL,CACD,IACM0M,EAAW,eAAA9O,EAAAc,OAAAC,EAAA,EAAAD,CAAAiO,IAAA9N,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAA2N,IAAA1N,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACVL,EAAoB,CACtBM,OAHO,MAIPnB,eACAC,QACAC,eALYc,EAAAE,KAAA,EAOOE,MAAM,iBAAkB,CAC3CC,OAAQ,OACRC,KAAMC,KAAKC,UAAUX,GACrBY,QAAS,CAAEC,eAAgB,sBAVf,cAOVZ,EAPUE,EAAAW,KAAAX,EAAAE,KAAA,EAYWJ,EAASc,OAZpB,OAasB,YAbtBZ,EAAAW,KAaCE,kBACbC,MAAM,uFACNjC,EAAS,eAETiC,MAAM,iEAjBM,wBAAAd,EAAAkB,SAAAtB,MAAH,yBAAAlB,EAAAyC,MAAAC,KAAAC,YAAA,GAoBFN,OAAOO,QAAQ,sFAE1BkM,IACKjM,MAAMC,QAAQC,UAiCvB,UACAvD,EAAAC,EAAAC,cAAA,UAAQiB,QA7EI,WAChBgO,EAAgB,IAChBC,EAAS,IACTC,EAAe,MA0EX,SACArP,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,cAAaL,EAAAC,EAAAC,cAAA,2yMCtFnB,SAAS6D,EAATvD,GAAuC,IAAlBgP,EAAkBhP,EAAlBgP,eAE1B7O,EAAWC,cAFiC0I,EAIEC,mBAASiG,EAAe1O,cAJ1B0I,EAAAlI,OAAAmI,EAAA,EAAAnI,CAAAgI,EAAA,GAI3CmG,EAJ2CjG,EAAA,GAIvBkG,EAJuBlG,EAAA,GAAAG,EAKZJ,mBAASiG,EAAezO,OALZ6I,EAAAtI,OAAAmI,EAAA,EAAAnI,CAAAqI,EAAA,GAK3CgG,EAL2C/F,EAAA,GAK9BgG,EAL8BhG,EAAA,GAAAE,EAMAP,mBAASiG,EAAexO,aANxB+I,EAAAzI,OAAAmI,EAAA,EAAAnI,CAAAwI,EAAA,GAM3C+F,EAN2C9F,EAAA,GAMxB+F,EANwB/F,EAAA,GAuDlD,OACI/J,EAAAC,EAAAC,cAAA,YAAUC,MAAM,QACZH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,kCACRF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,aACH9J,MAAOsO,EAAe3O,WAAY8D,UAAQ,IAC9C3E,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,eACHC,UAAU,MACV/J,MAAOuO,EACPvE,SAAU,SAAAC,GAAC,OAAIuE,EAAsBvE,EAAEC,OAAOlK,UAClDlB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,QACHC,UAAU,MACV/J,MAAOyO,EACPzE,SAAU,SAAAC,GAAC,OAAIyE,EAAezE,EAAEC,OAAOlK,UAC3ClB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,cACHC,UAAU,KACV/J,MAAO2O,EACPE,YAAY,eACZ7E,SArEgB,SAACC,GACzB,IAAMjK,EAAQiK,EAAEC,OAAOlK,MAAM0M,QAAQ,wBAAyB,YAC9DkC,EAAqB5O,MAoEjBlB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQiB,QAnEK,WACjB,GAA2B,KAAvBsO,GAA6C,KAAhBE,GAA4C,KAAtBE,EACnDjN,MAAM,4BAEL,CACD,IACM/B,EAAa2O,EAAe3O,WAC5ByO,EAAW,eAAAjO,EAAAC,OAAAC,EAAA,EAAAD,CAAA0O,IAAAvO,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAoO,IAAAnO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACVL,EAAoB,CACtBM,OAJO,SAKPwN,qBACAE,cACAE,oBACAhP,cANYiB,EAAAE,KAAA,EAQOE,MAAM,iBAAkB,CAC3CC,OAAQ,OACRC,KAAMC,KAAKC,UAAUX,GACrBY,QAAS,CAAEC,eAAgB,sBAXf,cAQVZ,EARUE,EAAAW,KAAAX,EAAAE,KAAA,EAaWJ,EAASc,OAbpB,OAcsB,YAdtBZ,EAAAW,KAcCE,kBACbC,MAAM,yFACNjC,EAAS,eAETiC,MAAM,oEAlBM,wBAAAd,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,YAAA,GAqBFN,OAAOO,QAAQ,qFAE1BkM,IACKjM,MAAMC,QAAQC,UAoCvB,UACAvD,EAAAC,EAAAC,cAAA,UAAQiB,QA/EI,WAChBuO,EAAsBF,EAAe1O,cACrC8O,EAAeJ,EAAezO,OAC9B+O,EAAqBN,EAAexO,eA4EhC,SACAhB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,cAAaL,EAAAC,EAAAC,cAAA,0BC1FnB,SAAS+P,GAATzP,GACE,IAAX8D,EAAW9D,EAAX8D,QAEF,OACAtE,EAAAC,EAAAC,cAAA,UAAQgB,MAAOoD,EAAQE,WAAYF,EAAQE,UAA3C,MAAyDF,EAAQO,WCHtD,SAASqL,GAAT1P,GACgB,IAA1BgF,EAA0BhF,EAA1BgF,UAAW2K,EAAe3P,EAAf2P,aACZ,OACInQ,EAAAC,EAAAC,cAAA,UAAQ8K,GAAG,YAAYE,SAAU,SAAAC,GAAC,OAAIgF,EAAahF,EAAEC,OAAOlK,SACxDlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,OAAOuK,UAAQ,EAAC9G,UAAQ,EAAC+G,QAAM,GAA7C,UACClG,EAAU7B,IAAI,SAACW,EAASV,GAAV,OACX5D,EAAAC,EAAAC,cAAC+P,GAAD,CACI3L,QAASA,EACTT,IAAKD,0xMCJV,SAASgE,GAATpH,GAAoE,IAAnDgF,EAAmDhF,EAAnDgF,UAAWG,EAAwCnF,EAAxCmF,aAAclC,EAA0BjD,EAA1BiD,UAAWO,EAAexD,EAAfwD,aAE1DrD,EAAWC,cAF8D0I,EAI7CC,mBAAS,IAJoCC,EAAAlI,OAAAmI,EAAA,EAAAnI,CAAAgI,EAAA,GAIxE9E,EAJwEgF,EAAA,GAI7D2G,EAJ6D3G,EAAA,GAAAG,EAK3CJ,mBAAS,IALkCK,EAAAtI,OAAAmI,EAAA,EAAAnI,CAAAqI,EAAA,GAKxE9I,EALwE+I,EAAA,GAK5DsD,EAL4DtD,EAAA,GAAAE,EAMxDP,mBAAS,MAAzBjD,EANwEhF,OAAAmI,EAAA,EAAAnI,CAAAwI,EAAA,MAQ/E7F,oBAAU,YACY,eAAA5C,EAAAC,OAAAC,EAAA,EAAAD,CAAA8O,KAAA3O,KAAG,SAAAC,IAAA,IAAAE,EAAAuC,EAAA,OAAAiM,KAAAvO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACME,MAAM,kBADZ,cACXN,EADWE,EAAAW,KAAAX,EAAAE,KAAA,EAEUJ,EAASc,OAFnB,OAEXyB,EAFWrC,EAAAW,KAGjBuB,EAAaG,GAHI,wBAAArC,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,aAAA,EAKlBiB,GACKf,MAAMC,QAAQC,QACpB,IAEHU,oBAAU,WACN,GAAmB,KAAfpD,EAAmB,EAEG,eAAAuG,EAAA9F,OAAAC,EAAA,EAAAD,CAAA8O,KAAA3O,KAAG,SAAA4F,IAAA,IAAAgJ,EAAAzO,EAAAuC,EAAA,OAAAiM,KAAAvO,KAAA,SAAAyF,GAAA,cAAAA,EAAAvF,KAAAuF,EAAAtF,MAAA,cACfqO,EAAsB,CACxBpO,OAHO,SAIPpB,cAHiByG,EAAAtF,KAAA,EAKEE,MAAM,iBAAkB,CAC3CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU+N,GACrB9N,QAAS,CAAEC,eAAgB,sBARV,cAKfZ,EALe0F,EAAA7E,KAAA6E,EAAAtF,KAAA,EAUMJ,EAASc,OAVf,OAUfyB,EAVemD,EAAA7E,KAWrBkD,EAAaxB,GAXQ,wBAAAmD,EAAAtE,SAAAqE,MAAH,yBAAAD,EAAAnE,MAAAC,KAAAC,aAAA,EAatBmN,GACKjN,MAAMC,QAAQC,YAGnBoC,EAAa,KAGlB,CAAC9E,IA4CJ,OACIb,EAAAC,EAAAC,cAAA,YAAUC,MAAM,QACZH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,kCACRF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC+M,EAAD,CACIxJ,UAAWA,EACXyJ,cAAeA,IAEnBlN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,4BACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACgQ,GAAD,CACI1K,UAAWA,EACX2K,aAAcA,IAEtBnQ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQiB,QApDK,WACjB,GAAkB,KAAdqD,GAAmC,KAAf3D,EACpB+B,MAAM,uDAEL,CACD,IACM2N,EAAQ,eAAAC,EAAAlP,OAAAC,EAAA,EAAAD,CAAA8O,KAAA3O,KAAG,SAAAgP,IAAA,IAAAlK,EAAA3E,EAAA,OAAAwO,KAAAvO,KAAA,SAAA6O,GAAA,cAAAA,EAAA3O,KAAA2O,EAAA1O,MAAA,cACPuE,EAAiB,CACnBtE,OAHO,MAIPuC,YACA3D,aACAyF,gBALSoK,EAAA1O,KAAA,EAOUE,MAAM,cAAe,CACxCC,OAAQ,OACRC,KAAMC,KAAKC,UAAUiE,GACrBhE,QAAS,CAAEC,eAAgB,sBAVlB,cAOPZ,EAPO8O,EAAAjO,KAAAiO,EAAA1O,KAAA,EAYcJ,EAASc,OAZvB,OAayB,YAbzBgO,EAAAjO,KAaIE,kBACbC,MAAM,iFACNjC,EAAS,YAETiC,MAAM,8DAjBG,wBAAA8N,EAAA1N,SAAAyN,MAAH,yBAAAD,EAAAvN,MAAAC,KAAAC,YAAA,GAoBCN,OAAOO,QAAQ,mFAE1BmN,IACKlN,MAAMC,QAAQC,UAuBvB,UACAvD,EAAAC,EAAAC,cAAA,UAAQiB,QA1DI,WAChB+L,EAAc,IACdiD,EAAa,MAwDT,SACAnQ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,WAAUL,EAAAC,EAAAC,cAAA,6yMC5GhB,SAASyQ,GAATnQ,GAC8B,IAAvCoQ,EAAuCpQ,EAAvCoQ,aAAcC,EAAyBrQ,EAAzBqQ,sBAEVlQ,EAAWC,cAEXkQ,EAAOF,EAAaE,KAkC1B,OACI9Q,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAK0Q,EAAaE,MAClB9Q,EAAAC,EAAAC,cAAA,UAAK0Q,EAAa5K,SAClBhG,EAAAC,EAAAC,cAAA,UAAK0Q,EAAazI,WAClBnI,EAAAC,EAAAC,cAAA,UAAK0Q,EAAaG,iBAClB/Q,EAAAC,EAAAC,cAAA,cAAM0Q,EAAaI,WACnBhR,EAAAC,EAAAC,cAAA,cAAM0Q,EAAaK,WACnBjR,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,uBAAuBC,QAzC7C,WACb0P,EAAsBD,GACtBjQ,EAAS,2BAyCLX,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,SAASC,QAvC/B,WACb,IAAM+P,EAAkB,eAAA7P,EAAAC,OAAAC,EAAA,EAAAD,CAAA6P,KAAA1P,KAAG,SAAAC,IAAA,IAAA0P,EAAAxP,EAAA,OAAAuP,KAAAtP,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAGjBoP,EAAuB,CACzBnP,OAHW,SAGH6O,QAJWhP,EAAAE,KAAA,EAMAE,MAAM,oBAAqB,CAC9CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU8O,GACrB7O,QAAS,CAAEC,eAAgB,sBATR,cAMjBZ,EANiBE,EAAAW,KAAAX,EAAAE,KAAA,EAWIJ,EAASc,OAXb,OAYe,YAZfZ,EAAAW,KAYNE,kBACbC,MAAM,qEACNC,OAAOC,SAASC,UAEhBH,MAAM,mDAhBa,wBAAAd,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,YAAA,GAmBTN,OAAOO,QAAQ,wEAE1B8N,IACK7N,MAAMC,QAAQC,YCpChB,SAAS8N,GAAT7Q,GAC8B,IAAvCoQ,EAAuCpQ,EAAvCoQ,aAAcC,EAAyBrQ,EAAzBqQ,sBAChB,OACI7Q,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,MAAIwD,QAAQ,KAAZ,aAGR1D,EAAAC,EAAAC,cAAA,aACK0Q,EAAajN,IAAI,SAACiN,EAAchN,GAAf,OACd5D,EAAAC,EAAAC,cAACyQ,GAAD,CACAC,aAAcA,EACV/M,IAAKD,EACLiN,sBAAuBA,2xMCnBhC,SAASS,GAAT9Q,GAAgE,IAAzBqQ,EAAyBrQ,EAAzBqQ,sBAAyBvH,EAEnCC,mBAAS,IAF0BC,EAAAlI,OAAAmI,EAAA,EAAAnI,CAAAgI,EAAA,GAEpEsH,EAFoEpH,EAAA,GAEtD+H,EAFsD/H,EAAA,GAc3E,OAVAvF,oBAAU,YACW,eAAA5C,EAAAC,OAAAC,EAAA,EAAAD,CAAAkQ,KAAA/P,KAAG,SAAAC,IAAA,IAAAE,EAAAuC,EAAA,OAAAqN,KAAA3P,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACOE,MAAM,qBADb,cACVN,EADUE,EAAAW,KAAAX,EAAAE,KAAA,EAEWJ,EAASc,OAFpB,OAEVyB,EAFUrC,EAAAW,KAGhB8O,EAAgBpN,GAHA,wBAAArC,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,aAAA,EAKjBsO,GACKpO,MAAMC,QAAQC,QACpB,IAGCvD,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,sCACRF,EAAAC,EAAAC,cAACmR,GAAD,CACIT,aAAcA,EACdC,sBAAuBA,KCnBxB,SAASa,GAATlR,GAA+C,IAAxBqQ,EAAwBrQ,EAAxBqQ,sBAElC,OACI7Q,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,oBAAmBL,EAAAC,EAAAC,cAAA,mCAC5BF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACoR,GAAD,CACIT,sBAAuBA,wxMCTxB,SAASa,KAEpB,IAAM/Q,EAAWC,cAFkB0I,EAILC,mBAAS,IAJJC,EAAAlI,OAAAmI,EAAA,EAAAnI,CAAAgI,EAAA,GAI5BtD,EAJ4BwD,EAAA,GAInBmI,EAJmBnI,EAAA,GAAAG,EAKDJ,mBAAS,IALRK,EAAAtI,OAAAmI,EAAA,EAAAnI,CAAAqI,EAAA,GAK5BxB,EAL4ByB,EAAA,GAKjBgI,EALiBhI,EAAA,GAAAE,EAMWP,mBAAS,IANpBQ,EAAAzI,OAAAmI,EAAA,EAAAnI,CAAAwI,EAAA,GAM5BiH,EAN4BhH,EAAA,GAMX8H,EANW9H,EAAA,GAAAE,EAODV,mBAAS,IAPRW,EAAA5I,OAAAmI,EAAA,EAAAnI,CAAA2I,EAAA,GAO5B+G,EAP4B9G,EAAA,GAOjB4H,EAPiB5H,EAAA,GAuDnC,OACIlK,EAAAC,EAAAC,cAAA,YAAUC,MAAM,QACZH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,oCACRF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,UACHC,UAAU,MACV/J,MAAO8E,EACPkF,SAAU,SAAAC,GAAC,OAAIwG,EAAWxG,EAAEC,OAAOlK,UACvClB,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,YACHC,UAAU,OACV/J,MAAOiH,EACP+C,SAAU,SAAAC,GAAC,OAAIyG,EAAazG,EAAEC,OAAOlK,UACzClB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACR+J,GAAG,kBACHO,IAAI,IACJC,IAAI,QACJtK,MAAO6P,GAAmBgB,KAAKvG,IAAI,EAAGuF,GACtC7F,SAAU,SAAAC,GAAC,OAAI0G,EAAmB1G,EAAEC,OAAOlK,UAC/ClB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACR+J,GAAG,YACHO,IAAI,IACJC,IAAI,QACJtK,MAAO8P,GAAae,KAAKvG,IAAI,EAAGwF,GAChC9F,SAAU,SAAAC,GAAC,OAAI2G,EAAa3G,EAAEC,OAAOlK,UACzClB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQiB,QAzEK,WACjB,GAAgB,KAAZ6E,GAAgC,KAAdmC,GAAwC,KAApB4I,GACrB,KAAdC,EACHpO,MAAM,4BAEL,CACD,IACMoP,EAAc,eAAAxR,EAAAc,OAAAC,EAAA,EAAAD,CAAA2Q,KAAAxQ,KAAG,SAAAC,IAAA,IAAA0P,EAAAxP,EAAA,OAAAqQ,KAAApQ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACboP,EAAuB,CACzBnP,OAHO,MAIP+D,UACAmC,YACA4I,kBACAC,aANelP,EAAAE,KAAA,EAQIE,MAAM,oBAAqB,CAC9CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU8O,GACrB7O,QAAS,CAAEC,eAAgB,sBAXZ,cAQbZ,EARaE,EAAAW,KAAAX,EAAAE,KAAA,EAaQJ,EAASc,OAbjB,OAcmB,YAdnBZ,EAAAW,KAcFE,kBACbC,MAAM,6FACNjC,EAAS,kBAETiC,MAAM,oEAlBS,wBAAAd,EAAAkB,SAAAtB,MAAH,yBAAAlB,EAAAyC,MAAAC,KAAAC,YAAA,GAqBLN,OAAOO,QAAQ,yFAE1B4O,IACK3O,MAAMC,QAAQC,UA0CvB,UACAvD,EAAAC,EAAAC,cAAA,UAAQiB,QAjFI,WAChBwQ,EAAW,IACXC,EAAa,IACbC,EAAmB,IACnBC,EAAa,MA6ET,SACA9R,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,iBAAgBL,EAAAC,EAAAC,cAAA,6yMC5FtB,SAASwR,GAATlR,GAA8C,IAAtB0R,EAAsB1R,EAAtB0R,mBAE7BvR,EAAWC,cAFwC0I,EAIfC,mBAAS2I,EAAmBlM,SAJbwD,EAAAlI,OAAAmI,EAAA,EAAAnI,CAAAgI,EAAA,GAIlD6I,EAJkD3I,EAAA,GAInC4I,EAJmC5I,EAAA,GAAAG,EAKXJ,mBAAS2I,EAAmB/J,WALjByB,EAAAtI,OAAAmI,EAAA,EAAAnI,CAAAqI,EAAA,GAKlD0I,EALkDzI,EAAA,GAKjC0I,EALiC1I,EAAA,GAAAE,EAMCP,mBAAS2I,EAAmBnB,iBAN7BhH,EAAAzI,OAAAmI,EAAA,EAAAnI,CAAAwI,EAAA,GAMlDyI,EANkDxI,EAAA,GAM3ByI,EAN2BzI,EAAA,GAAAE,EAOXV,mBAAS2I,EAAmBlB,WAPjB9G,EAAA5I,OAAAmI,EAAA,EAAAnI,CAAA2I,EAAA,GAOlDwI,EAPkDvI,EAAA,GAOjCwI,EAPiCxI,EAAA,GAwDzD,OACIlK,EAAAC,EAAAC,cAAA,YAAUC,MAAM,QACZH,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,uCACRF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,UACH9J,MAAOgR,EAAmBlM,QAASrB,UAAQ,IAC/C3E,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OACR+J,GAAG,YACHC,UAAU,OACV/J,MAAOmR,EACPnH,SAAU,SAAAC,GAAC,OAAImH,EAAmBnH,EAAEC,OAAOlK,UAC/ClB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACR+J,GAAG,kBACHO,IAAI,IACJC,IAAI,QACJtK,MAAOqR,GAAyBR,KAAKvG,IAAI,EAAG+G,GAC5CrH,SAAU,SAAAC,GAAC,OAAIqH,EAAyBrH,EAAEC,OAAOlK,UACrDlB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACR+J,GAAG,YACHO,IAAI,IACJC,IAAI,QACJtK,MAAOuR,GAAmBV,KAAKvG,IAAI,EAAGiH,GACtCvH,SAAU,SAAAC,GAAC,OAAIuH,EAAmBvH,EAAEC,OAAOlK,UAC/ClB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQiB,QAxEK,WACjB,GAAsB,KAAlBgR,GAA4C,KAApBE,GAAoD,KAA1BE,GAC3B,KAApBE,EACH7P,MAAM,4BAEL,CAEesP,EAAmBlM,QADnC,IAEMgM,EAAc,eAAA3Q,EAAAC,OAAAC,EAAA,EAAAD,CAAAqR,KAAAlR,KAAG,SAAAC,IAAA,IAAA0P,EAAAxP,EAAA,OAAA+Q,KAAA9Q,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACboP,EAAuB,CACzBnP,OAJO,MAKPkQ,gBACAE,kBACAE,wBACAE,mBANe3Q,EAAAE,KAAA,EAQIE,MAAM,oBAAqB,CAC9CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU8O,GACrB7O,QAAS,CAAEC,eAAgB,sBAXZ,cAQbZ,EARaE,EAAAW,KAAAX,EAAAE,KAAA,EAaQJ,EAASc,OAbjB,OAcmB,YAdnBZ,EAAAW,KAcFE,kBACbC,MAAM,6FACNjC,EAAS,kBAETiC,MAAM,oEAlBS,wBAAAd,EAAAkB,SAAAtB,MAAH,yBAAAL,EAAA4B,MAAAC,KAAAC,YAAA,GAqBLN,OAAOO,QAAQ,yFAE1B4O,IACK3O,MAAMC,QAAQC,UAwCvB,UACAvD,EAAAC,EAAAC,cAAA,UAAQiB,QAhFI,WAChBiR,EAAiBF,EAAmBlM,SACpCsM,EAAmBJ,EAAmB/J,WACtCqK,EAAyBN,EAAmBnB,iBAC5C2B,EAAmBR,EAAmBlB,aA4ElC,SACAhR,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,iBAAgBL,EAAAC,EAAAC,cAAA,0BCxEtB,SAAS0S,KAAM,IAAAtJ,EAEaC,mBAAS,IAFtBC,EAAAlI,OAAAmI,EAAA,EAAAnI,CAAAgI,EAAA,GAEtBuC,EAFsBrC,EAAA,GAEPtB,EAFOsB,EAAA,GAAAG,EAGaJ,mBAAS,IAHtBK,EAAAtI,OAAAmI,EAAA,EAAAnI,CAAAqI,EAAA,GAGtB4E,EAHsB3E,EAAA,GAGPrF,EAHOqF,EAAA,GAAAE,EAIeP,mBAAS,IAJxBQ,EAAAzI,OAAAmI,EAAA,EAAAnI,CAAAwI,EAAA,GAItB0F,EAJsBzF,EAAA,GAINrJ,EAJMqJ,EAAA,GAAAE,EAKSV,mBAAS,IALlBW,EAAA5I,OAAAmI,EAAA,EAAAnI,CAAA2I,EAAA,GAKThE,GALSiE,EAAA,GAAAA,EAAA,IAAAE,EAMuBb,mBAAS,IANhCc,EAAA/I,OAAAmI,EAAA,EAAAnI,CAAA8I,EAAA,GAMtB8H,EANsB7H,EAAA,GAMFwG,EANExG,EAAA,GAAAE,EAOGhB,mBAAS,IAPZiB,EAAAlJ,OAAAmI,EAAA,EAAAnI,CAAAiJ,EAAA,GAOtBvB,EAPsBwB,EAAA,GAOZrB,EAPYqB,EAAA,GAAAE,EAQKnB,mBAAS,IARdoB,EAAArJ,OAAAmI,EAAA,EAAAnI,CAAAoJ,EAAA,GAQtBlF,EARsBmF,EAAA,GAQXhF,EARWgF,EAAA,GAAAE,EASKtB,mBAAS,IATduB,EAAAxJ,OAAAmI,EAAA,EAAAnI,CAAAuJ,EAAA,GAStBpH,EATsBqH,EAAA,GASX9G,EATW8G,EAAA,GAAA+H,EAUDtJ,mBAAS,IAVRuJ,EAAAxR,OAAAmI,EAAA,EAAAnI,CAAAuR,EAAA,GAUtBnL,EAVsBoL,EAAA,GAUdjL,EAVciL,EAAA,GAkB7B,OACC9S,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACCJ,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,KACC/S,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,IAAIC,QAASjT,EAAAC,EAAAC,cAACI,EAAD,QAEzBN,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,YAAYC,QAASjT,EAAAC,EAAAC,cAACgJ,EAAD,CAChCF,SAAUA,EACVG,YAAaA,EACbjB,iBAAkBA,MACnBlI,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,eAAeC,QAASjT,EAAAC,EAAAC,cAACgT,EAAD,QACpClT,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,kBAAkBC,QAASjT,EAAAC,EAAAC,cAACiT,EAAD,CACtCtH,cAAeA,MAGhB7L,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,aAAaC,QAASjT,EAAAC,EAAAC,cAACwF,EAAD,CACjCF,UAAWA,EACXG,aAAcA,EACdpB,iBAAkBA,MACnBvE,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,QAASjT,EAAAC,EAAAC,cAACiN,EAAD,CACpC1J,UAAWA,EACXO,aAAcA,MAEfhE,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,mBAAmBC,QAASjT,EAAAC,EAAAC,cAACkT,EAAD,CACvC7E,cAAeA,MAEhBvO,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,aAAaC,QAASjT,EAAAC,EAAAC,cAAC6D,EAAD,CACjCN,UAAWA,EACXO,aAAcA,EACdtD,kBAAmBA,MACpBV,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,QAASjT,EAAAC,EAAAC,cAACmT,EAAD,QACrCrT,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,mBAAmBC,QAASjT,EAAAC,EAAAC,cAACoT,EAAD,CACvC9D,eAAgBA,MAEjBxP,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,UAAUC,QAASjT,EAAAC,EAAAC,cAAC0H,EAAD,CAC9BF,OAAQA,EACRG,UAAWA,EACX5B,eAAgBA,MACjBjG,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,aAAaC,QAASjT,EAAAC,EAAAC,cAACqT,GAAD,CACjC/N,UAAWA,EACXG,aAAcA,EACdlC,UAAWA,EACXO,aAAcA,MAIfhE,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,QAASjT,EAAAC,EAAAC,cAACwR,GAAD,CACpCQ,mBAAoBA,EACpBrB,sBAAuBA,MACxB7Q,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,mBAAmBC,QAASjT,EAAAC,EAAAC,cAACsT,GAAD,QACxCxT,EAAAC,EAAAC,cAAC6S,EAAA,EAAD,CAAOC,KAAK,sBAAsBC,QAASjT,EAAAC,EAAAC,cAACuT,GAAD,CAC1CvB,mBAAoBA,OAEtBlS,EAAAC,EAAAC,cAAC6M,EAAD,QC/FJ,IAYe2G,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA1I,EAAA,GAAA2I,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAtT,GAAiD,IAA9CwT,EAA8CxT,EAA9CwT,OAAQC,EAAsCzT,EAAtCyT,OAAQC,EAA8B1T,EAA9B0T,OAAQC,EAAsB3T,EAAtB2T,OAAQC,EAAc5T,EAAd4T,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzU,EAAAC,EAAAC,cAACF,EAAAC,EAAMyU,WAAP,KACE1U,EAAAC,EAAAC,cAACyU,GAAD,QAOJjB","file":"static/js/main.e7d667bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nexport default function HeaderComponent () {\r\n\r\n    return (\r\n        <div>\r\n            <h1>CoffeeBuzz Database System</h1>\r\n            <ul class=\"navigation\">\r\n                <li><Link to=\"/\">Home</Link></li>\r\n                <li><Link to=\"/Customers\">Customers</Link></li>\r\n                <li><Link to=\"/Addresses\">Addresses</Link></li>\r\n                <li><Link to=\"/Orders\">Orders</Link></li>\r\n                <li><Link to=\"/Products\">Products</Link></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Home() {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Home</h2>\r\n            <h3>Welcome to the CoffeeBuzz Database System</h3>\r\n            <p>Please use the links above to view, create, edit, or delete entries from the corresponding databases.</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function CustomerRowComponent(\r\n    { customer, setCustomerToEdit }) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const customerID = customer.customerID\r\n\r\n    const onUpdate = () => {\r\n        setCustomerToEdit(customer)\r\n        navigate(\"/CustomersUpdate\")\r\n    }\r\n\r\n    const onDelete = () => {\r\n        const deleteCustomer = async () => {\r\n            const action = \"Delete\"\r\n\r\n            const newCustomerValues = {\r\n                action, customerID\r\n            }\r\n            const response = await fetch('/api/Customers', {\r\n                method: 'POST',\r\n                body: JSON.stringify(newCustomerValues),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            })\r\n            const responseJson = await response.json()\r\n            if (responseJson.request_received === \"success\") {\r\n                alert(\"Successfully deleted the Customer!\\nThe page will now refresh.\")\r\n                window.location.reload(false)\r\n            } else {\r\n                alert(\"Failed to delete Customer, please try again!\")\r\n            }\r\n        }\r\n        const answer = window.confirm(\"This will delete the selected Customer.\\nDo you wish to proceed?\")\r\n        if (answer) {\r\n            deleteCustomer()\r\n                .catch(console.error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{customer.customerID}</td>\r\n            <td>{customer.customerName}</td>\r\n            <td>{customer.email}</td>\r\n            <td>{customer.phoneNumber}</td>\r\n            <td>\r\n                <input type=\"button\" value=\"Update\" onClick={onUpdate} />\r\n            </td>\r\n            <td>\r\n            <input type=\"button\" value=\"Delete\"\r\n                       onClick={onDelete}/>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport CustomerRowComponent from \"./CustomerRowComponent\";\r\n\r\nexport default function CustomerTableComponent(\r\n    {customers, setCustomerToEdit}) {\r\n    return (\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>Customer ID</th>\r\n                <th>Name</th>\r\n                <th>Email</th>\r\n                <th>Phone Number</th>\r\n                <th colSpan=\"2\">Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {customers.map((customer, i) =>\r\n                    <CustomerRowComponent\r\n                        customer={customer}\r\n                        key={i}\r\n                        setCustomerToEdit={setCustomerToEdit}\r\n                    />)}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport CustomerTableComponent from \"./CustomerTableComponent\";\r\n\r\nexport default function CustomerBrowseComponent({customers, setCustomerToEdit}) {\r\n\r\n    return (\r\n        <fieldset>\r\n            <legend><strong>Browse Customers</strong></legend>\r\n            <CustomerTableComponent\r\n                customers={customers}\r\n                setCustomerToEdit={setCustomerToEdit}\r\n            />\r\n        </fieldset>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport CustomerBrowseComponent from \"../../Components/Customers/CustomerBrowseComponent\";\r\nimport {useEffect} from \"react\";\r\n//import CustomerSearchComponent from \"../Components/CustomerSearchComponent\";\r\n\r\nexport default function Customers({ customers, setCustomers, setCustomerToEdit }) {\r\n\r\n    useEffect(() => {\r\n        const getCustomers = async() => {\r\n            const response = await fetch(\"/api/Customers\")\r\n            const responseJson = await response.json()\r\n            setCustomers(responseJson)\r\n        }\r\n        getCustomers()\r\n            .catch(console.error)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h2>Customers</h2>\r\n            <Link to='/CustomersAdd'><button>Add a new Customer</button></Link>\r\n            <br />\r\n            <br />\r\n            <CustomerBrowseComponent\r\n                customers={customers}\r\n                setCustomerToEdit={setCustomerToEdit}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n//<CustomerSearchComponent/>","import React from 'react'\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nexport default function AddressRowComponent(\r\n    {address, setAddressToEdit}) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const addressID = address.addressID\r\n\r\n    const onUpdate = () => {\r\n        setAddressToEdit(address)\r\n        navigate(\"/AddressesUpdate\")\r\n    }\r\n\r\n    const onDelete = () => {\r\n        const deleteAddress = async () => {\r\n            const action = \"Delete\"\r\n\r\n            const newAddressValues = {\r\n                action, addressID\r\n            }\r\n            const response = await fetch('/api/Addresses', {\r\n                method: 'POST',\r\n                body: JSON.stringify(newAddressValues),\r\n                headers: {'Content-Type': 'application/json'},\r\n            })\r\n            const responseJson = await response.json()\r\n            if (responseJson.request_received === \"success\") {\r\n                alert(\"Successfully deleted the Address!\\nThe page will now reload.\")\r\n                window.location.reload(false)\r\n            } else {\r\n                alert(\"Failed to delete Address, please try again!\")\r\n            }\r\n        }\r\n        const answer = window.confirm(\"This will delete the selected Address.\\nDo you wish to proceed?\")\r\n        if (answer) {\r\n            deleteAddress()\r\n                .catch(error => {\r\n                    alert('This Address is in use with an Order and cannot be deleted. Please try another Address')\r\n                })\r\n        }\r\n    }\r\n\r\n    const handleBoolean = (input) => {\r\n        if(input === 0) {\r\n            return <input type=\"checkbox\" disabled/>\r\n        }\r\n        else if (input === 1) {\r\n            return <input type=\"checkbox\" checked disabled/>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{address.addressID}</td>\r\n            <td>{address.customerID}</td>\r\n            <td>{address.recipient}</td>\r\n            <td>{address.street}</td>\r\n            <td>{address.city}</td>\r\n            <td>{address.state}</td>\r\n            <td>{address.zip}</td>\r\n            <td>{handleBoolean(address.isPrimary)}</td>\r\n            <td>{handleBoolean(address.isActive)}</td>\r\n            <td>\r\n                <input type=\"button\" value=\"Update\" onClick={onUpdate}/>\r\n            </td>\r\n            <td>\r\n                <input type=\"button\" value=\"Delete\"\r\n                       onClick={onDelete}\r\n                />\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport AddressRowComponent from \"./AddressRowComponent\";\r\n\r\nexport default function AddressTableComponent(\r\n    { addresses, setAddressToEdit }) {\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Address ID</th>\r\n                    <th>Customer ID</th>\r\n                    <th>Recipient</th>\r\n                    <th colSpan=\"4\">Address</th>\r\n                    <th>Primary</th>\r\n                    <th>Active</th>\r\n                    <th colSpan=\"2\">Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {addresses.map((address, i) =>\r\n                    <AddressRowComponent\r\n                        address={address}\r\n                        key={i}\r\n                        setAddressToEdit={setAddressToEdit}\r\n                    />)}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport AddressTableComponent from \"./AddressTableComponent\";\r\n\r\nexport default function AddressBrowseComponent({ addresses, setAddressToEdit }) {\r\n\r\n    return (\r\n        <fieldset>\r\n            <legend><strong>Browse Addresses</strong></legend>\r\n            <AddressTableComponent\r\n                addresses={addresses}\r\n                setAddressToEdit={setAddressToEdit}\r\n            />\r\n        </fieldset>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport AddressBrowseComponent from \"../../Components/Addresses/AddressBrowseComponent\";\r\nimport {useEffect} from \"react\";\r\n//import AddressSearchComponent from \"../../Components/Addresses/AddressSearchComponent\";\r\n\r\nexport default function Addresses({addresses, setAddresses, setAddressToEdit }) {\r\n\r\n    useEffect(() => {\r\n        const getAddresses = async() => {\r\n            const response = await fetch(\"/api/Addresses\")\r\n            const responseJson = await response.json()\r\n            setAddresses(responseJson)\r\n        }\r\n        getAddresses()\r\n            .catch(console.error)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h2>Addresses</h2>\r\n            <Link to=\"/AddressesAdd\"><button>Add a new Address</button></Link>\r\n            <br />\r\n            <br />\r\n            <AddressBrowseComponent\r\n                addresses={addresses}\r\n                setAddressToEdit={setAddressToEdit}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n//<AddressSearchComponent/>","import React from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function OrderRowComponent(\r\n    { order, setOrderToEdit }) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const orderID = order.orderID\r\n    const addressID = order.addressID\r\n\r\n    const onUpdate = () => {\r\n        setOrderToEdit(order)\r\n        navigate(\"/OrderUpdate\")\r\n    }\r\n\r\n    //const seeOrderDetails = () => {\r\n//    navigate(\"/OrderDetails\")\r\n//\r\n\r\n    const markShipped = () => {\r\n        const markOrderShipped = async () => {\r\n            const action = \"Update\"\r\n            // YYYY-MM-DD hh:mm:ss\r\n            const newDate = new Date()\r\n            const shipDateTime = [newDate.getFullYear(),\r\n                (newDate.getMonth()+1).toString().padStart(2, '0'),\r\n                (newDate.getDate()).toString().padStart(2, '0')].join('-')+' '+\r\n                [(newDate.getHours()).toString().padStart(2, '0'),\r\n                (newDate.getMinutes()).toString().padStart(2, '0'),\r\n                (newDate.getSeconds()).toString().padStart(2, '0')].join(':')\r\n\r\n            const newOrderValues = {\r\n                action, addressID, shipDateTime, orderID\r\n            }\r\n            const response = await fetch('/api/Orders', {\r\n                method: 'POST',\r\n                body: JSON.stringify(newOrderValues),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            })\r\n            const responseJson = await response.json()\r\n            if (responseJson.request_received === \"success\") {\r\n                alert(\"Successfully marked the Order as shipped!\\nThe page will now refresh.\")\r\n                window.location.reload(false)\r\n            } else {\r\n                alert(\"Failed to mark Order shipped, please try again!\")\r\n            }\r\n        }\r\n        const answer = window.confirm(\"This will mark the selected Order as shipped.\\nDo you wish to proceed?\")\r\n        if (answer) {\r\n            markOrderShipped()\r\n                .catch(console.error)\r\n        }\r\n    }\r\n\r\n    const onDelete = () => {\r\n        const deleteOrders = async () => {\r\n            const action = \"Delete\"\r\n\r\n            const newOrderValues = {\r\n                action, orderID\r\n            }\r\n            const response = await fetch('/api/Orders', {\r\n                method: 'POST',\r\n                body: JSON.stringify(newOrderValues),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            })\r\n            const responseJson = await response.json()\r\n            if (responseJson.request_received === \"success\") {\r\n                alert(\"Successfully deleted the Order!\\nThe page will now refresh.\")\r\n                window.location.reload(false)\r\n            } else {\r\n                alert(\"Failed to delete Order, please try again!\")\r\n            }\r\n        }\r\n        const answer = window.confirm(\"This will delete the selected Order.\\nDo you wish to proceed?\")\r\n        if (answer) {\r\n            deleteOrders()\r\n                .catch(error => {\r\n                    alert('This Order is in use with an Order Detail. You cannot delete. Please try another Order')\r\n                })\r\n        }\r\n    }\r\n\r\n    const handleDateTime = (input) => {\r\n        if (input === null) {\r\n            return \"Not shipped yet\"\r\n        }\r\n        else {\r\n            return input\r\n        }\r\n    }\r\n\r\n\r\n    const shipButton = (input) => {\r\n        if (input === null) {\r\n            return <input type=\"button\" value=\"Mark Shipped\" onClick={markShipped}/>\r\n        }\r\n        else {\r\n            return <input type=\"button\" value=\"Mark Shipped\" disabled/>\r\n        }\r\n    }\r\n\r\n    const deleteButton = (input) => {\r\n        if (input === null) {\r\n            return <input type=\"button\" value=\"Delete\" onClick={onDelete}/>\r\n        }\r\n        else {\r\n            return <input type=\"button\" value=\"Delete\" disabled/>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{order.orderID}</td>\r\n            <td>{order.customerID}</td>\r\n            <td>{order.addressID}</td>\r\n            <td>{handleDateTime(order.shipDateTime)}</td>\r\n            <td>\r\n                <input type=\"button\" value=\"See Order Details\"/>\r\n            </td>\r\n            <td>\r\n                <input type=\"button\" value=\"Change Address ID\"/>\r\n            </td>\r\n            <td>{shipButton(order.shipDateTime)}</td>\r\n            <td>\r\n                {deleteButton(order.shipDateTime)}\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport OrderRowComponent from \"./OrderRowComponent\";\r\n\r\nexport default function OrderTableComponent(\r\n    { orders, setOrderToEdit }) {\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Order ID</th>\r\n                    <th>Customer ID</th>\r\n                    <th>Address ID</th>\r\n                    <th>Ship Date and Time</th>\r\n                    <th colSpan=\"4\">Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {orders.map((order, i) =>\r\n                    <OrderRowComponent\r\n                        order={order}\r\n                        key={i}\r\n                        setOrderToEdit={setOrderToEdit}\r\n                    />)}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport OrderTableComponent from \"./OrderTableComponent\";\r\n\r\nexport default function OrderBrowseComponent({ orders, setOrderToEdit }) {\r\n\r\n    return (\r\n        <fieldset>\r\n            <legend><strong>Browse Orders</strong></legend>\r\n            <OrderTableComponent\r\n                orders={orders}\r\n                setOrderToEdit={setOrderToEdit}\r\n            />\r\n        </fieldset>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport OrderBrowseComponent from \"../../Components/Orders/OrderBrowseComponent\";\r\nimport {useEffect} from \"react\";\r\n//import OrderSearchComponent from \"../Components/OrderSearchComponent\";\r\n\r\nexport default function Orders({ orders, setOrders, setOrderToEdit }) {\r\n\r\n    useEffect(() => {\r\n        const getOrders = async() => {\r\n            const response = await fetch(\"/api/Orders\")\r\n            const responseJson = await response.json()\r\n            setOrders(responseJson)\r\n        }\r\n        getOrders()\r\n            .catch(console.error)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h2>Orders</h2>\r\n            <Link to=\"/OrdersAdd\"><button>Add a new Order</button></Link>\r\n            <br />\r\n            <br />\r\n            <OrderBrowseComponent\r\n                orders={orders}\r\n                setOrderToEdit={setOrderToEdit}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n//<OrderSearchComponent/>","import React from 'react'\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nexport default function ProductRowComponent(\r\n    {product, setProductToEdit}) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const productID = product.productID\r\n\r\n    const onUpdate = () => {\r\n        setProductToEdit(product)\r\n        navigate(\"/ProductsUpdate\")\r\n    }\r\n\r\n    const onDelete = () => {\r\n        const deleteProduct = async () => {\r\n            const action = \"Delete\"\r\n\r\n            const newProductValues = {\r\n                action, productID\r\n            }\r\n            const response = await fetch('/api/Products', {\r\n                method: 'POST',\r\n                body: JSON.stringify(newProductValues),\r\n                headers: {'Content-Type': 'application/json'},\r\n            })\r\n            const responseJson = await response.json()\r\n            if (responseJson.request_received === \"success\") {\r\n                alert(\"Successfully deleted the Product!\\nThe page will now reload.\")\r\n                window.location.reload(false)\r\n            } else {\r\n                alert(\"Failed to delete Product, please try again!\")\r\n            }\r\n        }\r\n        const answer = window.confirm(\"This will delete the selected Product.\\nDo you wish to proceed?\")\r\n        if (answer) {\r\n            deleteProduct()\r\n                .catch(console.error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{product.productID}</td>\r\n            <td>{product.productName}</td>\r\n            <td>{product.description}</td>\r\n            <td>{product.brand}</td>\r\n            <td>{product.weightVal}</td>\r\n            <td>{product.weightUnit}</td>\r\n            <td>${product.sellPrice}</td>\r\n            <td>${product.replenishCost}</td>\r\n            <td>{product.numberInStock}</td>\r\n            <td>\r\n                <input type=\"button\" value=\"Update\" onClick={onUpdate}/>\r\n            </td>\r\n            <td>\r\n                <input type=\"button\" value=\"Delete\"\r\n                       onClick={onDelete}\r\n                />\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ProductRowComponent from \"./ProductRowComponent\";\r\n\r\nexport default function ProductTableComponent(\r\n    {products, setProductToEdit}) {\r\n    return (\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>Product ID</th>\r\n                <th>Product Name</th>\r\n                <th>Description</th>\r\n                <th>Brand</th>\r\n                <th colSpan=\"2\">Weight</th>\r\n                <th>Sell Price</th>\r\n                <th>Replenish Cost</th>\r\n                <th>Number in Stock</th>\r\n                <th colSpan=\"2\">Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {products.map((product, i) =>\r\n                    <ProductRowComponent\r\n                        product={product}\r\n                        key={i}\r\n                        setProductToEdit={setProductToEdit}\r\n                    />)}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ProductTableComponent from \"./ProductTableComponent\";\r\n\r\nexport default function ProductBrowseComponent( {products, setProductToEdit} ) {\r\n\r\n    return (\r\n        <fieldset>\r\n            <legend><strong>Browse Products</strong></legend>\r\n            <ProductTableComponent\r\n                products={products}\r\n                setProductToEdit={setProductToEdit}\r\n            />\r\n        </fieldset>\r\n    )\r\n}","import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\nimport ProductBrowseComponent from \"../../Components/Products/ProductBrowseComponent\";\r\nimport {useEffect} from \"react\";\r\n//import ProductSearchComponent from \"../Components/ProductSearchComponent\";\r\n\r\nexport default function Products({products, setProducts, setProductToEdit}) {\r\n\r\n    useEffect(() => {\r\n        const getProducts = async() => {\r\n            const response = await fetch(\"/api/Products\")\r\n            const responseJson = await response.json()\r\n            setProducts(responseJson)\r\n        }\r\n        getProducts()\r\n            .catch(console.error)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h2>Products</h2>\r\n            <Link to=\"/ProductsAdd\"><button>Add a new Product</button></Link>\r\n            <br/>\r\n            <br/>\r\n            <ProductBrowseComponent\r\n                products={products}\r\n                setProductToEdit={setProductToEdit}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n//<ProductSearchComponent/>","import React from 'react'\r\nimport {useState} from \"react\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\n\r\nexport default function Products() {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [productName, setProductName] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [brand, setBrand] = useState('')\r\n    const [weightVal, setWeightVal] = useState('')\r\n    const [weightUnit, setWeightUnit] = useState('')\r\n    const [sellPrice, setSellPrice] = useState('')\r\n    const [replenishCost, setReplenishCost] = useState('')\r\n    const [numberInStock, setNumberInStock] = useState('')\r\n\r\n    const handleReset = () => {\r\n        setProductName('')\r\n        setDescription('')\r\n        setBrand('')\r\n        setWeightVal('')\r\n        setWeightUnit('')\r\n        setSellPrice('')\r\n        setReplenishCost('')\r\n        setNumberInStock('')\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (productName === '' || description === ''|| brand === ''\r\n            || weightVal === ''|| weightUnit === ''|| sellPrice === ''\r\n            || replenishCost === ''|| numberInStock === '') {\r\n            alert(\"Error: Missing fields. Please enter all values.\")\r\n        }\r\n        else if (weightVal < 0 || sellPrice < 0 || replenishCost < 0 || numberInStock < 0) {\r\n            alert(\"Error: Numeric values cannot be less than 0. Please enter new values.\")\r\n        }\r\n        else if (weightVal > 10000 || sellPrice > 10000 || replenishCost > 10000 || numberInStock > 10000) {\r\n            alert(\"Error: Numeric values cannot be more than than 10,000. Please enter new values.\")\r\n        }\r\n        else {\r\n            const action = \"Add\"\r\n            const newProduct = async () => {\r\n                const newProductValues = {\r\n                    action,\r\n                    productName,\r\n                    description,\r\n                    brand,\r\n                    weightVal,\r\n                    weightUnit,\r\n                    sellPrice,\r\n                    replenishCost,\r\n                    numberInStock\r\n                }\r\n                const response = await fetch('/api/Products', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(newProductValues),\r\n                    headers: {'Content-Type': 'application/json'},\r\n                })\r\n                const responseJson = await response.json()\r\n                if (responseJson.request_received === \"success\") {\r\n                    alert(\"Successfully added the Product!\\nYou will now be redirected to the Products Page.\")\r\n                    navigate(\"/Products\")\r\n                } else {\r\n                    alert(\"Failed to add Product, please check the input and try again!\")\r\n                }\r\n            }\r\n            const answer = window.confirm(\"This will create a new Product with the entered values.\\nDo you wish to proceed?\")\r\n            if (answer) {\r\n                newProduct()    // the new data has already loaded into the component\r\n                    .catch(console.error)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <fieldset class=\"form\">\r\n            <legend><strong>Add a new Product</strong></legend>\r\n            <label>Product Name:</label>\r\n                <input type=\"text\"\r\n                       id=\"productName\"\r\n                       maxLength=\"100\"\r\n                       value={productName}\r\n                       onChange={e => setProductName(e.target.value)}/>\r\n            <label>Description:</label>\r\n                <input type=\"text\"\r\n                       id=\"description\"\r\n                       maxLength=\"1000\"\r\n                       value={description}\r\n                       onChange={e => setDescription(e.target.value)}/>\r\n            <label>Brand:</label>\r\n                <input type=\"text\"\r\n                       id=\"brand\"\r\n                       maxLength=\"100\"\r\n                       value={brand}\r\n                       onChange={e => setBrand(e.target.value)}/>\r\n            <label>Weight Value:</label>\r\n                <br/>\r\n                <input type=\"number\"\r\n                       id=\"weightVal\"\r\n                       title=\"The numeric weight of an item, example: 100. The unit is selected in the next box (lbs or oz).\"\r\n                       step='0.01'\r\n                       min=\"0\"\r\n                       max=\"10000\"\r\n                       value={weightVal}\r\n                       onChange={e => setWeightVal(e.target.value)}/>\r\n                <br/>\r\n            <label>Weight Unit:</label>\r\n                <br/>\r\n                <select id=\"weightUnit\" onChange={e => setWeightUnit(e.target.value)}>\r\n                    <option value=\"none\" selected disabled hidden>Select</option>\r\n                    <option value=\"lbs\">lbs</option>\r\n                    <option value=\"oz\">oz</option>\r\n                </select>\r\n                <br/>\r\n            <label>Sell Price:</label>\r\n                <br/>\r\n                <span>$ </span>\r\n                <input type=\"number\"\r\n                       id=\"sellPrice\"\r\n                       title=\"What the customer pays for the product\"\r\n                       step='0.01'\r\n                       min=\"0\"\r\n                       max=\"10000\"\r\n                       value={sellPrice}\r\n                       onChange={e => setSellPrice(e.target.value)}/>\r\n                <br/>\r\n            <label>Replenish Cost:</label>\r\n                <br/>\r\n                <span>$ </span>\r\n                <input type=\"number\"\r\n                       id=\"replenish cost\"\r\n                       title=\"How much it costs CoffeeBuzz to purchase the item from the manufacturer\"\r\n                       step='0.01'\r\n                       min=\"0\"\r\n                       max=\"10000\"\r\n                       value={replenishCost}\r\n                       onChange={e => setReplenishCost(e.target.value)}/>\r\n                <br/>\r\n            <label>Number in Stock:</label>\r\n                <input type=\"number\"\r\n                       id=\"number in stock\"\r\n                       min=\"0\"\r\n                       max=\"10000\"\r\n                       value={numberInStock}\r\n                       onChange={e => setNumberInStock(e.target.value)}/>\r\n                <br/>\r\n                <br/>\r\n            <button onClick={handleSubmit}>Submit</button>\r\n            <button onClick={handleReset}>Reset</button>\r\n            <Link to=\"/Products\"><button>Cancel</button></Link>\r\n        </fieldset>\r\n    )\r\n}\r\n\r\n//<ProductSearchComponent/>","import React from 'react'\r\nimport {useState} from \"react\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\n\r\nexport default function Products({productToEdit}) {\r\n\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [productNameUpdate, setProductNameUpdate] = useState(productToEdit.productName)\r\n    const [descriptionUpdate, setDescriptionUpdate] = useState(productToEdit.description)\r\n    const [brandUpdate, setBrandUpdate] = useState(productToEdit.brand)\r\n    const [weightValUpdate, setWeightValUpdate] = useState(productToEdit.weightVal)\r\n    const [weightUnitUpdate, setWeightUnitUpdate] = useState(productToEdit.weightUnit)\r\n    const [sellPriceUpdate, setSellPriceUpdate] = useState(productToEdit.sellPrice)\r\n    const [replenishCostUpdate, setReplenishCostUpdate] = useState(productToEdit.replenishCost)\r\n    const [numberInStockUpdate, setNumberInStockUpdate] = useState(productToEdit.numberInStock)\r\n\r\n    const handleReset = () => {\r\n        setProductNameUpdate(productToEdit.productName)\r\n        setDescriptionUpdate(productToEdit.description)\r\n        setBrandUpdate(productToEdit.brand)\r\n        setWeightValUpdate(productToEdit.weightVal)\r\n        setWeightUnitUpdate(productToEdit.weightUnit)\r\n        setSellPriceUpdate(productToEdit.sellPrice)\r\n        setReplenishCostUpdate(productToEdit.replenishCost)\r\n        setNumberInStockUpdate(productToEdit.numberInStock)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (productNameUpdate === '' || descriptionUpdate === ''|| brandUpdate === ''\r\n            || weightValUpdate === ''|| weightUnitUpdate=== ''|| sellPriceUpdate === ''\r\n            || replenishCostUpdate === ''|| numberInStockUpdate === '') {\r\n            alert(\"Error: Missing fields. Please enter all values.\")\r\n        }\r\n        else if (weightValUpdate < 0 || sellPriceUpdate < 0 || replenishCostUpdate < 0 || numberInStockUpdate < 0) {\r\n            alert(\"Error: Numeric values cannot be less than 0. Please enter new values.\")\r\n        }\r\n        else if (weightValUpdate > 10000 || sellPriceUpdate > 10000 || replenishCostUpdate > 10000 || numberInStockUpdate > 10000) {\r\n            alert(\"Error: Numeric values cannot be more than than 10,000. Please enter new values.\")\r\n        }\r\n        else {\r\n            const action = \"Update\"\r\n            const productID = productToEdit.productID\r\n            const newProduct = async () => {\r\n                const newProductValues = {\r\n                    action,\r\n                    productNameUpdate,\r\n                    descriptionUpdate,\r\n                    brandUpdate,\r\n                    weightValUpdate,\r\n                    weightUnitUpdate,\r\n                    sellPriceUpdate,\r\n                    replenishCostUpdate,\r\n                    numberInStockUpdate,\r\n                    productID\r\n                }\r\n                const response = await fetch('/api/Products', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(newProductValues),\r\n                    headers: {'Content-Type': 'application/json'},\r\n                })\r\n                const responseJson = await response.json()\r\n                if (responseJson.request_received === \"success\") {\r\n                    alert(\"Successfully updated the Product!\\nYou will now be redirected to the Products Page.\")\r\n                    navigate(\"/Products\")\r\n                } else {\r\n                    alert(\"Failed to update Product, please check the input and try again!\")\r\n                }\r\n            }\r\n            const answer = window.confirm(\"This will update this Product with the entered values.\\nDo you wish to proceed?\")\r\n            if (answer) {\r\n                newProduct()    // the new data has already loaded into the component\r\n                    .catch(console.error)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <fieldset class=\"form\">\r\n            <legend><strong>Update Product</strong></legend>\r\n            <label>Product ID:</label>\r\n                <input type=\"text\"\r\n                       id=\"productID\"\r\n                       value={productToEdit.productID} disabled/>\r\n            <label>Product Name:</label>\r\n                <input type=\"text\"\r\n                       id=\"productName\"\r\n                       maxLength=\"100\"\r\n                       value={productNameUpdate}\r\n                       onChange={e => setProductNameUpdate(e.target.value)}/>\r\n            <label>Description:</label>\r\n                <input type=\"text\"\r\n                       id=\"description\"\r\n                       maxLength=\"1000\"\r\n                       value={descriptionUpdate}\r\n                       onChange={e => setDescriptionUpdate(e.target.value)}/>\r\n            <label>Brand:</label>\r\n                <input type=\"text\"\r\n                       id=\"brand\"\r\n                       maxLength=\"100\"\r\n                       value={brandUpdate}\r\n                       onChange={e => setBrandUpdate(e.target.value)}/>\r\n            <label>Weight Value:</label>\r\n                <br/>\r\n                <input type=\"number\"\r\n                       id=\"weightVal\"\r\n                       title=\"The numeric weight of an item, example: 100. The unit is selected in the next box (lbs or oz).\"\r\n                       step='0.01'\r\n                       min=\"0\"\r\n                       max=\"10000\"\r\n                       value={weightValUpdate}\r\n                       onChange={e => setWeightValUpdate(e.target.value)}/>\r\n                <br/>\r\n            <label>Weight Unit:</label>\r\n                <br/>\r\n                <select id=\"weightUnit\" onChange={e => setWeightUnitUpdate(e.target.value)}>\r\n                    <option value={weightUnitUpdate} selected disabled hidden>{weightUnitUpdate}</option>\r\n                    <option value=\"lbs\">lbs</option>\r\n                    <option value=\"oz\">oz</option>\r\n                </select>\r\n                <br/>\r\n            <label>Sell Price:</label>\r\n                <br/>\r\n                <span>$ </span>\r\n                <input type=\"number\"\r\n                       id=\"sellPrice\"\r\n                       title=\"What the customer pays for the product\"\r\n                       step='0.01'\r\n                       min=\"0\"\r\n                       max=\"10000\"\r\n                       value={sellPriceUpdate}\r\n                       onChange={e => setSellPriceUpdate(e.target.value)}/>\r\n                <br/>\r\n            <label>Replenish Cost:</label>\r\n                <br/>\r\n                <span>$ </span>\r\n                <input type=\"number\"\r\n                       id=\"replenish cost\"\r\n                       title=\"How much it costs CoffeeBuzz to purchase the item from the manufacturer\"\r\n                       step='0.01'\r\n                       min=\"0\"\r\n                       max=\"10000\"\r\n                       value={replenishCostUpdate}\r\n                       onChange={e => setReplenishCostUpdate(e.target.value)}/>\r\n                <br/>\r\n            <label>Number in Stock:</label>\r\n                <input type=\"number\"\r\n                       id=\"number in stock\"\r\n                       min=\"0\"\r\n                       max=\"10000\"\r\n                       value={numberInStockUpdate}\r\n                       onChange={e => setNumberInStockUpdate(e.target.value)}/>\r\n                <br/>\r\n                <br/>\r\n            <button onClick={handleSubmit}>Submit</button>\r\n            <button onClick={handleReset}>Reset</button>\r\n            <Link to=\"/Products\"><button>Cancel</button></Link>\r\n        </fieldset>\r\n    )\r\n}\r\n\r\n//<ProductSearchComponent/>","import React from 'react'\r\n\r\nexport default function FooterComponent (){\r\n    return (\r\n        <footer>\r\n            Copyright 2022 – Kelsey Schmidt and Andy Chen – CS340 Final Project\r\n        </footer>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function CustomerIDDynamicSelectAddOptionComponent(\r\n    { customer }) {\r\n\r\n    return (\r\n    <option value={customer.customerID}>{customer.customerID} - {customer.customerName}</option>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport CustomerIDDynamicSelectAddOptionComponent from \"./CustomerIDDynamicSelectAddOptionComponent\";\r\n\r\nexport default function CustomerIDDynamicSelectAddComponent(\r\n    {customers, setCustomerID}) {\r\n\r\n    return (\r\n        <select id=\"customerID\" onChange={e => setCustomerID(e.target.value)}>\r\n            <option value=\"none\" selected disabled hidden>Select</option>\r\n            {customers.map((customer, i) =>\r\n                <CustomerIDDynamicSelectAddOptionComponent\r\n                    customer={customer}\r\n                    key={i}\r\n                />)}\r\n        </select>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport CustomerIDDynamicSelectAddComponent from \"../../Components/Customers/CustomerIDDynamicSelectAddComponent\";\r\nimport {useEffect} from \"react\";\r\n\r\nexport default function Address( {customers, setCustomers} ) {\r\n\r\n    useEffect(() => {       // load customers for selection\r\n        const getCustomers = async() => {\r\n            const response = await fetch(\"/api/Customers\")\r\n            const responseJson = await response.json()\r\n            setCustomers(responseJson)\r\n        }\r\n        getCustomers()\r\n            .catch(console.error)\r\n    }, [])\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [customerID, setCustomerID] = useState('')\r\n    const [recipient, setRecipient] = useState('')\r\n    const [street, setStreet] = useState('')\r\n    const [city, setCity] = useState('')\r\n    const [state, setState] = useState('')\r\n    const [zip, setZip] = useState('')\r\n    const [isActive, setIsActive] = useState(0)\r\n    const [isPrimary, setIsPrimary] = useState(0)\r\n\r\n    const handleReset = () => {\r\n        setRecipient('')\r\n        setStreet('')\r\n        setCity('')\r\n        setState('')\r\n        setZip('')\r\n        setIsActive(0)\r\n        setIsPrimary(0)\r\n    }\r\n\r\n    const numericZip = (e) => {\r\n        const value = e.target.value.replace(/\\D/g, \"\")\r\n        setZip(value)\r\n    }\r\n\r\n    const handleActiveChange = () => {\r\n        if(isActive === 0) {\r\n            setIsActive(1)\r\n        }\r\n        else if (isActive === 1) {\r\n            setIsActive(0)\r\n        }\r\n    }\r\n\r\n    const handlePrimaryChange = () => {\r\n        if(isPrimary === 0) {\r\n            setIsPrimary(1)\r\n        }\r\n        else if (isPrimary === 1) {\r\n            setIsPrimary(0)\r\n        }\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (customerID === '' || recipient === '' || street === '' || city === ''\r\n            || state === '' || zip === '') {\r\n            alert(\"Error: Missing fields. Please enter all values.\")\r\n        }\r\n        else if (zip.length !== 5 ){\r\n            alert(\"Error: Invalid zip code. Please correct the zip value.\")\r\n        }\r\n        else {\r\n            const action = \"Add\"\r\n            const newAddress = async () => {\r\n                const newAddressValues = {\r\n                    action,\r\n                    customerID,\r\n                    recipient,\r\n                    street,\r\n                    city,\r\n                    state,\r\n                    zip,\r\n                    isActive,\r\n                    isPrimary\r\n                }\r\n                const response = await fetch('/api/Addresses', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(newAddressValues),\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                })\r\n                const responseJson = await response.json()\r\n                if (responseJson.request_received === \"success\") {\r\n                    alert(\"Successfully added the Address!\\nYou will now be redirected to the Addresses Page.\")\r\n                    navigate(\"/Addresses\")\r\n                } else {\r\n                    alert(\"Failed to add Address, please check the input and try again!\")\r\n                }\r\n            }\r\n            const answer = window.confirm(\"This will create a new Address with the entered values.\\nDo you wish to proceed?\")\r\n            if (answer) {\r\n                newAddress()     // the new data has already loaded into the component\r\n                    .catch(console.error)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <fieldset class=\"form\">\r\n            <legend><strong>Add a new Address</strong></legend>\r\n            <label>Customer ID:</label>\r\n                <br/>\r\n                <CustomerIDDynamicSelectAddComponent\r\n                    customers={customers}\r\n                    setCustomerID={setCustomerID}\r\n                />\r\n                <br/>\r\n            <label>Recipient:</label>\r\n                <input type=\"text\"\r\n                    id=\"recipient\"\r\n                    title=\"Name of the recipient. Example: Shelandra Wyatt\"\r\n                    maxLength=\"100\"\r\n                    value={recipient}\r\n                    onChange={e => setRecipient(e.target.value)} />\r\n            <label>Street:</label>\r\n                <input type=\"text\"\r\n                    id=\"street\"\r\n                    title=\"The number and street name for the address. Example: 12345 Vitruvian Way\"\r\n                    maxLength=\"100\"\r\n                    value={street}\r\n                    onChange={e => setStreet(e.target.value)} />\r\n                <br />\r\n            <label>City:</label>\r\n                <br />\r\n                <input type=\"text\"\r\n                    id=\"city\"\r\n                    maxLength=\"100\"\r\n                    value={city}\r\n                    onChange={e => setCity(e.target.value)} />\r\n                <br />\r\n            <label>State:</label>\r\n                <br/>\r\n                <select id=\"state\"\r\n                        onChange={e => setState(e.target.value)}>\r\n                    <option value=\"none\" selected disabled hidden>Select</option>\r\n                    <option value=\"AL\">Alabama</option>\r\n                    <option value=\"AK\">Alaska</option>\r\n                    <option value=\"AZ\">Arizona</option>\r\n                    <option value=\"AR\">Arkansas</option>\r\n                    <option value=\"AS\">American Samoa</option>\r\n                    <option value=\"CA\">California</option>\r\n                    <option value=\"CO\">Colorado</option>\r\n                    <option value=\"CT\">Connecticut</option>\r\n                    <option value=\"DE\">Delaware</option>\r\n                    <option value=\"DC\">District of Columbia</option>\r\n                    <option value=\"FL\">Florida</option>\r\n                    <option value=\"GA\">Georgia</option>\r\n                    <option value=\"GU\">Guam</option>\r\n                    <option value=\"HI\">Hawaii</option>\r\n                    <option value=\"ID\">Idaho</option>\r\n                    <option value=\"IL\">Illinois</option>\r\n                    <option value=\"IN\">Indiana</option>\r\n                    <option value=\"IA\">Iowa</option>\r\n                    <option value=\"KS\">Kansas</option>\r\n                    <option value=\"KY\">Kentucky</option>\r\n                    <option value=\"LA\">Louisiana</option>\r\n                    <option value=\"ME\">Maine</option>\r\n                    <option value=\"MD\">Maryland</option>\r\n                    <option value=\"MA\">Massachusetts</option>\r\n                    <option value=\"MI\">Michigan</option>\r\n                    <option value=\"MN\">Minnesota</option>\r\n                    <option value=\"MS\">Mississippi</option>\r\n                    <option value=\"MO\">Missouri</option>\r\n                    <option value=\"MT\">Montana</option>\r\n                    <option value=\"NE\">Nebraska</option>\r\n                    <option value=\"NV\">Nevada</option>\r\n                    <option value=\"NH\">New Hampshire</option>\r\n                    <option value=\"NJ\">New Jersey</option>\r\n                    <option value=\"NM\">New Mexico</option>\r\n                    <option value=\"NY\">New York</option>\r\n                    <option value=\"NC\">North Carolina</option>\r\n                    <option value=\"ND\">North Dakota</option>\r\n                    <option value=\"CM\">Northern Mariana Islands</option>\r\n                    <option value=\"OH\">Ohio</option>\r\n                    <option value=\"OK\">Oklahoma</option>\r\n                    <option value=\"OR\">Oregon</option>\r\n                    <option value=\"PA\">Pennsylvania</option>\r\n                    <option value=\"PR\">Puerto Rico</option>\r\n                    <option value=\"RI\">Rhode Island</option>\r\n                    <option value=\"SC\">South Carolina</option>\r\n                    <option value=\"SD\">South Dakota</option>\r\n                    <option value=\"TN\">Tennessee</option>\r\n                    <option value=\"TX\">Texas</option>\r\n                    <option value=\"TT\">Trust Territories</option>\r\n                    <option value=\"UT\">Utah</option>\r\n                    <option value=\"VT\">Vermont</option>\r\n                    <option value=\"VA\">Virginia</option>\r\n                    <option value=\"VI\">Virgin Islands</option>\r\n                    <option value=\"WA\">Washington</option>\r\n                    <option value=\"WV\">West Virginia</option>\r\n                    <option value=\"WI\">Wisconsin</option>\r\n                    <option value=\"WY\">Wyoming</option>\r\n                </select>\r\n                <br/>\r\n            <label>Zip:</label>\r\n                <br />\r\n                <input type=\"text\"\r\n                    id=\"zip\"\r\n                    title=\"Please enter 5 digit zip only. Example: 10101\"\r\n                    maxLength=\"10\"\r\n                    value={zip}\r\n                    onChange={numericZip} />\r\n                <br />\r\n            <label>isPrimary:</label>\r\n                <br />\r\n                <input type=\"checkbox\"\r\n                       id=\"isPrimary\"\r\n                       onChange={handlePrimaryChange} />\r\n                <br />\r\n            <label>isActive:</label>\r\n                <br />\r\n                <input type=\"checkbox\"\r\n                    id=\"isActive\"\r\n                    onChange={handleActiveChange} />\r\n                <br />\r\n                <br />\r\n            <button onClick={handleSubmit}>Submit</button>\r\n            <button onClick={handleReset}>Reset</button>\r\n            <Link to=\"/Addresses\"><button>Cancel</button></Link>\r\n        </fieldset>\r\n    )\r\n}\r\n\r\n//<AddressSearchComponent/>","import React from 'react'\r\n\r\nexport default function HandleBooleanActiveComponent(\r\n    { isActiveUpdate, setIsActiveUpdate }) {\r\n\r\n    const handleActiveChange = () => {\r\n        if(isActiveUpdate === 0) {\r\n            setIsActiveUpdate(1)\r\n        }\r\n        else if (isActiveUpdate === 1) {\r\n            setIsActiveUpdate(0)\r\n        }\r\n    }\r\n\r\n    if(isActiveUpdate === 0) {\r\n        return <input type=\"checkbox\"\r\n                      id=\"isActive\"\r\n                      onChange={e => handleActiveChange(e)}/>\r\n    }\r\n    else if (isActiveUpdate ===1) {\r\n        return <input type=\"checkbox\"\r\n                      id=\"isActive\"\r\n                      checked\r\n                      onChange={e => handleActiveChange(e)} />\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function HandleBooleanPrimaryComponent(\r\n    { isPrimaryUpdate, setIsPrimaryUpdate }) {\r\n\r\n    const handlePrimaryChange = () => {\r\n        if(isPrimaryUpdate === 0) {\r\n            setIsPrimaryUpdate(1)\r\n        }\r\n        else if (isPrimaryUpdate === 1) {\r\n            setIsPrimaryUpdate(0)\r\n        }\r\n    }\r\n\r\n    if(isPrimaryUpdate === 0) {\r\n        return <input type=\"checkbox\"\r\n                      id=\"isPrimary\"\r\n                      onChange={e => handlePrimaryChange(e)}/>\r\n    }\r\n    else if (isPrimaryUpdate ===1) {\r\n        return <input type=\"checkbox\"\r\n                      id=\"isPrimary\"\r\n                      checked\r\n                      onChange={e => handlePrimaryChange(e)} />\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport HandleBooleanActiveComponent from \"../../Components/Addresses/HandleBooleanActiveComponent\";\r\nimport HandleBooleanPrimaryComponent from \"../../Components/Addresses/HandleBooleanPrimaryComponent\";\r\n\r\nexport default function Address({ addressToEdit }) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [recipientUpdate, setRecipientUpdate] = useState(addressToEdit.recipient)\r\n    const [streetUpdate, setStreetUpdate] = useState(addressToEdit.street)\r\n    const [cityUpdate, setCityUpdate] = useState(addressToEdit.city)\r\n    const [stateUpdate, setStateUpdate] = useState(addressToEdit.state)\r\n    const [zipUpdate, setZipUpdate] = useState(addressToEdit.zip)\r\n    const [isActiveUpdate, setIsActiveUpdate] = useState(addressToEdit.isActive)\r\n    const [isPrimaryUpdate, setIsPrimaryUpdate] = useState(addressToEdit.isPrimary)\r\n\r\n    const handleReset = () => {\r\n        setRecipientUpdate(addressToEdit.recipient)\r\n        setStreetUpdate(addressToEdit.street)\r\n        setCityUpdate(addressToEdit.city)\r\n        setStateUpdate(addressToEdit.state)\r\n        setZipUpdate(addressToEdit.zip)\r\n        setIsActiveUpdate(addressToEdit.isActive)\r\n        setIsPrimaryUpdate(addressToEdit.isPrimary)\r\n    }\r\n\r\n    const numericZip = (e) => {\r\n        const value = e.target.value.replace(/\\D/g, \"\");\r\n        setZipUpdate(value);\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (recipientUpdate === '' || streetUpdate === '' || cityUpdate === ''\r\n            || stateUpdate === '' || zipUpdate === '') {\r\n            alert(\"Please enter values!\")\r\n        }\r\n        else if (zipUpdate.length !== 5 ){\r\n            alert(\"Error: Invalid zip code. Please correct the zip value.\")\r\n        }\r\n        else {\r\n            const action = \"Update\"\r\n            const addressID = addressToEdit.addressID\r\n            const newAddress = async () => {\r\n                const newAddressValues = {\r\n                    action,\r\n                    recipientUpdate,\r\n                    streetUpdate,\r\n                    cityUpdate,\r\n                    stateUpdate,\r\n                    zipUpdate,\r\n                    isPrimaryUpdate,\r\n                    isActiveUpdate,\r\n                    addressID\r\n                }\r\n                const response = await fetch('/api/Addresses', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(newAddressValues),\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                })\r\n                const responseJson = await response.json()\r\n                if (responseJson.request_received === \"success\") {\r\n                    alert(\"Successfully updated the Address!\\nYou will now be redirected to the Addresses Page.\")\r\n                    navigate(\"/Addresses\")\r\n                    window.location.reload() // need this to update the checkboxes, they're being difficult\r\n                } else {\r\n                    alert(\"Failed to update Address, please check the input and try again!\")\r\n                }\r\n            }\r\n            const answer = window.confirm(\"This will update this Address with the entered values.\\nDo you wish to proceed?\")\r\n            if (answer) {\r\n                newAddress()     // the new data has already loaded into the component\r\n                    .catch(console.error)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <fieldset class=\"form\">\r\n            <legend><strong>Update Address</strong></legend>\r\n            <label>Address ID:</label>\r\n                <input type=\"text\"\r\n                    id=\"addressID\"\r\n                    value={addressToEdit.addressID} disabled />\r\n            <label>Customer ID:</label>\r\n            <input type=\"text\"\r\n                   id=\"customerID\"\r\n                   value={addressToEdit.customerID} disabled />\r\n            <label>Recipient:</label>\r\n                <input type=\"text\"\r\n                    id=\"recipient\"\r\n                    title=\"Name of the recipient. Example: Shelandra Wyatt\"\r\n                    maxLength=\"100\"\r\n                    value={recipientUpdate}\r\n                    onChange={e => setRecipientUpdate(e.target.value)} />\r\n            <label>Street:</label>\r\n                <input type=\"text\"\r\n                    id=\"street\"\r\n                    title=\"The number and street name for the address. Example: 12345 Vitruvian Way\"\r\n                    maxLength=\"100\"\r\n                    value={streetUpdate}\r\n                    onChange={e => setStreetUpdate(e.target.value)} />\r\n                <br />\r\n            <label>City:</label>\r\n                <br />\r\n                <input type=\"text\"\r\n                    id=\"city\"\r\n                    maxLength=\"100\"\r\n                    value={cityUpdate}\r\n                    onChange={e => setCityUpdate(e.target.value)} />\r\n                <br />\r\n            <label>State:</label>\r\n                <br/>\r\n                <select id=\"state\"\r\n                        onChange={e => setStateUpdate(e.target.value)}>\r\n                    <option value={stateUpdate} selected disabled hidden>{stateUpdate}</option>\r\n                    <option value=\"AL\">Alabama</option>\r\n                    <option value=\"AK\">Alaska</option>\r\n                    <option value=\"AZ\">Arizona</option>\r\n                    <option value=\"AR\">Arkansas</option>\r\n                    <option value=\"AS\">American Samoa</option>\r\n                    <option value=\"CA\">California</option>\r\n                    <option value=\"CO\">Colorado</option>\r\n                    <option value=\"CT\">Connecticut</option>\r\n                    <option value=\"DE\">Delaware</option>\r\n                    <option value=\"DC\">District of Columbia</option>\r\n                    <option value=\"FL\">Florida</option>\r\n                    <option value=\"GA\">Georgia</option>\r\n                    <option value=\"GU\">Guam</option>\r\n                    <option value=\"HI\">Hawaii</option>\r\n                    <option value=\"ID\">Idaho</option>\r\n                    <option value=\"IL\">Illinois</option>\r\n                    <option value=\"IN\">Indiana</option>\r\n                    <option value=\"IA\">Iowa</option>\r\n                    <option value=\"KS\">Kansas</option>\r\n                    <option value=\"KY\">Kentucky</option>\r\n                    <option value=\"LA\">Louisiana</option>\r\n                    <option value=\"ME\">Maine</option>\r\n                    <option value=\"MD\">Maryland</option>\r\n                    <option value=\"MA\">Massachusetts</option>\r\n                    <option value=\"MI\">Michigan</option>\r\n                    <option value=\"MN\">Minnesota</option>\r\n                    <option value=\"MS\">Mississippi</option>\r\n                    <option value=\"MO\">Missouri</option>\r\n                    <option value=\"MT\">Montana</option>\r\n                    <option value=\"NE\">Nebraska</option>\r\n                    <option value=\"NV\">Nevada</option>\r\n                    <option value=\"NH\">New Hampshire</option>\r\n                    <option value=\"NJ\">New Jersey</option>\r\n                    <option value=\"NM\">New Mexico</option>\r\n                    <option value=\"NY\">New York</option>\r\n                    <option value=\"NC\">North Carolina</option>\r\n                    <option value=\"ND\">North Dakota</option>\r\n                    <option value=\"CM\">Northern Mariana Islands</option>\r\n                    <option value=\"OH\">Ohio</option>\r\n                    <option value=\"OK\">Oklahoma</option>\r\n                    <option value=\"OR\">Oregon</option>\r\n                    <option value=\"PA\">Pennsylvania</option>\r\n                    <option value=\"PR\">Puerto Rico</option>\r\n                    <option value=\"RI\">Rhode Island</option>\r\n                    <option value=\"SC\">South Carolina</option>\r\n                    <option value=\"SD\">South Dakota</option>\r\n                    <option value=\"TN\">Tennessee</option>\r\n                    <option value=\"TX\">Texas</option>\r\n                    <option value=\"TT\">Trust Territories</option>\r\n                    <option value=\"UT\">Utah</option>\r\n                    <option value=\"VT\">Vermont</option>\r\n                    <option value=\"VA\">Virginia</option>\r\n                    <option value=\"VI\">Virgin Islands</option>\r\n                    <option value=\"WA\">Washington</option>\r\n                    <option value=\"WV\">West Virginia</option>\r\n                    <option value=\"WI\">Wisconsin</option>\r\n                    <option value=\"WY\">Wyoming</option>\r\n                </select>\r\n                <br/>\r\n            <label>Zip:</label>\r\n                <br />\r\n                <input type=\"text\"\r\n                    id=\"zip\"\r\n                       title=\"Please enter 5 digit zip only. Example: 10101\"\r\n                    maxLength=\"10\"\r\n                    value={zipUpdate}\r\n                    onChange={numericZip} />\r\n                <br />\r\n            <label>Primary:</label>\r\n                <br />\r\n                <HandleBooleanPrimaryComponent\r\n                    isPrimaryUpdate={isPrimaryUpdate}\r\n                    setIsPrimaryUpdate={setIsPrimaryUpdate}\r\n                />\r\n                <br />\r\n            <label>Active:</label>\r\n                <br />\r\n                <HandleBooleanActiveComponent\r\n                    isActiveUpdate={isActiveUpdate}\r\n                    setIsActiveUpdate={setIsActiveUpdate}\r\n                />\r\n                <br />\r\n                <br />\r\n            <button onClick={handleSubmit}>Submit</button>\r\n            <button onClick={handleReset}>Reset</button>\r\n            <Link to=\"/Addresses\"><button>Cancel</button></Link>\r\n        </fieldset>\r\n    )\r\n}\r\n\r\n//<AddressSearchComponent/>","import React from 'react'\r\nimport { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nexport default function Customers() {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [customerName, setCustomerName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [phoneNumber, setPhoneNumber] = useState('')\r\n\r\n    const handleReset = () => {\r\n        setCustomerName('')\r\n        setEmail('')\r\n        setPhoneNumber('')\r\n    }\r\n\r\n    const validatePhoneNumber = (e) => {\r\n        const value = e.target.value.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3')\r\n        setPhoneNumber(value)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (customerName === '' || email === '' || phoneNumber === '') {\r\n            alert(\"Error: Missing fields. Please enter all values.\")\r\n        }\r\n        else if (phoneNumber.length !== 12 ){\r\n            alert(\"Error: Invalid phone number. Please correct the phone number value.\")\r\n        }\r\n        else {\r\n            const action = \"Add\"\r\n            const newCustomer = async () => {\r\n                const newCustomerValues = {\r\n                    action,\r\n                    customerName,\r\n                    email,\r\n                    phoneNumber\r\n                }\r\n                const response = await fetch('/api/Customers', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(newCustomerValues),\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                })\r\n                const responseJson = await response.json()\r\n                if (responseJson.request_received === \"success\") {\r\n                    alert(\"Successfully added the Customer!\\nYou will now be redirected to the Customers Page.\")\r\n                    navigate(\"/Customers\")\r\n                } else {\r\n                    alert(\"Failed to add Customer, please check the input and try again!\")\r\n                }\r\n            }\r\n            const answer = window.confirm(\"This will create a new Customer with the entered values.\\nDo you wish to proceed?\")\r\n            if (answer) {\r\n                newCustomer()    // the new data has already loaded into the component\r\n                    .catch(console.error)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <fieldset class=\"form\">\r\n            <legend><strong>Add a new Customer</strong></legend>\r\n            <label>Customer Name:</label>\r\n            <input type=\"text\"\r\n                id=\"customerName\"\r\n                maxLength=\"100\"\r\n                value={customerName}\r\n                onChange={e => setCustomerName(e.target.value)} />\r\n            <br />\r\n            <label>Email:</label>\r\n            <br />\r\n            <input type=\"email\"\r\n                id=\"email\"\r\n                maxLength=\"100\"\r\n                value={email}\r\n                title='Please enter in this format: example@example.com'\r\n                onChange={e => setEmail(e.target.value)} />\r\n            <br />\r\n            <label>Phone Number:</label>\r\n            <input type=\"text\"\r\n                id=\"phoneNumber\"\r\n                value={phoneNumber}\r\n                maxLength=\"12\"\r\n                title='Please enter in this format: 123-456-1254'\r\n                onChange={validatePhoneNumber} />\r\n            <br />\r\n            <br />\r\n            <button onClick={handleSubmit}>Submit</button>\r\n            <button onClick={handleReset}>Reset</button>\r\n            <Link to=\"/Customers\"><button>Cancel</button></Link>\r\n        </fieldset>\r\n    )\r\n}\r\n\r\n//<CustomerSearchComponent/>","import React from 'react'\r\nimport { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nexport default function Customers({ customerToEdit }) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [customerNameUpdate, setCustomerNameUpdate] = useState(customerToEdit.customerName)\r\n    const [emailUpdate, setEmailUpdate] = useState(customerToEdit.email)\r\n    const [phoneNumberUpdate, setPhoneNumberUpdate] = useState(customerToEdit.phoneNumber)\r\n\r\n    const handleReset = () => {\r\n        setCustomerNameUpdate(customerToEdit.customerName)\r\n        setEmailUpdate(customerToEdit.email)\r\n        setPhoneNumberUpdate(customerToEdit.phoneNumber)\r\n    }\r\n\r\n    const validatePhoneNumber = (e) => {\r\n        const value = e.target.value.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3')\r\n        setPhoneNumberUpdate(value)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (customerNameUpdate === '' || emailUpdate === '' || phoneNumberUpdate === '') {\r\n            alert(\"Please enter values!\")\r\n        }\r\n        else {\r\n            const action = \"Update\"\r\n            const customerID = customerToEdit.customerID\r\n            const newCustomer = async () => {\r\n                const newCustomerValues = {\r\n                    action,\r\n                    customerNameUpdate,\r\n                    emailUpdate,\r\n                    phoneNumberUpdate,\r\n                    customerID\r\n                }\r\n                const response = await fetch('/api/Customers', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(newCustomerValues),\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                })\r\n                const responseJson = await response.json()\r\n                if (responseJson.request_received === \"success\") {\r\n                    alert(\"Successfully updated the Customer!\\nYou will now be redirected to the Customers Page.\")\r\n                    navigate(\"/Customers\")\r\n                } else {\r\n                    alert(\"Failed to update Customer, please check the input and try again!\")\r\n                }\r\n            }\r\n            const answer = window.confirm(\"This will update this Customer with the entered values.\\nDo you wish to proceed?\")\r\n            if (answer) {\r\n                newCustomer()\r\n                    .catch(console.error)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <fieldset class=\"form\">\r\n            <legend><strong>Update Customer</strong></legend>\r\n            <label>Customer ID:</label>\r\n            <input type=\"text\"\r\n                id=\"customerID\"\r\n                value={customerToEdit.customerID} disabled />\r\n            <label>Customer Name:</label>\r\n            <input type=\"text\"\r\n                id=\"customerName\"\r\n                maxLength=\"100\"\r\n                value={customerNameUpdate}\r\n                onChange={e => setCustomerNameUpdate(e.target.value)} />\r\n            <br />\r\n            <label>Email:</label>\r\n            <br />\r\n            <input type=\"text\"\r\n                id=\"email\"\r\n                maxLength=\"100\"\r\n                value={emailUpdate}\r\n                onChange={e => setEmailUpdate(e.target.value)} />\r\n            <br />\r\n            <label>Phone Number:</label>\r\n            <input type=\"text\"\r\n                id=\"phoneNumber\"\r\n                maxLength=\"12\"\r\n                value={phoneNumberUpdate}\r\n                placeholder='123-456-1254'\r\n                onChange={validatePhoneNumber} />\r\n            <br />\r\n            <br />\r\n            <button onClick={handleSubmit}>Submit</button>\r\n            <button onClick={handleReset}>Reset</button>\r\n            <Link to=\"/Customers\"><button>Cancel</button></Link>\r\n        </fieldset>\r\n    )\r\n}\r\n\r\n//<CustomerSearchComponent/>","import React from 'react'\r\n\r\nexport default function AddressIDDynamicSelectAddOptionComponent(\r\n    { address }) {\r\n\r\n    return (\r\n    <option value={address.addressID}>{address.addressID} - {address.recipient}</option>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport AddressIDDynamicSelectAddOptionComponent from \"./AddressIDDynamicSelectAddOptionComponent\";\r\n\r\nexport default function AddressIDDynamicSelectAddComponent(\r\n    {addresses, setAddressID}) {\r\n    return (\r\n        <select id=\"addressID\" onChange={e => setAddressID(e.target.value)}>\r\n            <option value=\"none\" selected disabled hidden>Select</option>\r\n            {addresses.map((address, i) =>\r\n                <AddressIDDynamicSelectAddOptionComponent\r\n                    address={address}\r\n                    key={i}\r\n                />)}\r\n        </select>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport AddressIDDynamicSelectAddComponent from \"../../Components/Addresses/AddressIDDynamicSelectAddComponent\";\r\nimport CustomerIDDynamicSelectAddComponent from \"../../Components/Customers/CustomerIDDynamicSelectAddComponent\";\r\nimport {useEffect} from \"react\";\r\n\r\nexport default function Orders({addresses, setAddresses, customers, setCustomers}) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [addressID, setAddressID] = useState('')\r\n    const [customerID, setCustomerID] = useState('')\r\n    const [shipDateTime] = useState(null)\r\n\r\n    useEffect(() => {   // load customers for selection\r\n        const getCustomers = async() => {\r\n            const response = await fetch(\"/api/Customers\")\r\n            const responseJson = await response.json()\r\n            setCustomers(responseJson)\r\n        }\r\n        getCustomers()\r\n            .catch(console.error)\r\n    }, [])\r\n\r\n    useEffect(() => {   // load addresses for selection\r\n        if (customerID !== \"\") {\r\n            const action = \"Search\"\r\n            const newAddressSearch = async () => {\r\n                const searchAddressValues = {\r\n                    action,\r\n                    customerID\r\n                }\r\n                const response = await fetch('/api/Addresses', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(searchAddressValues),\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                })\r\n                const responseJson = await response.json()\r\n                setAddresses(responseJson)\r\n            }\r\n            newAddressSearch()  // the new data has already loaded into the component\r\n                .catch(console.error)\r\n        }\r\n        else {\r\n            setAddresses([])\r\n        }\r\n\r\n    }, [customerID])\r\n\r\n\r\n\r\n\r\n    const handleReset = () => {\r\n        setCustomerID('')\r\n        setAddressID('')\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (addressID === '' || customerID === '') {\r\n            alert(\"Error: Missing fields. Please enter all values.\")\r\n        }\r\n        else {\r\n            const action = \"Add\"\r\n            const newOrder = async () => {\r\n                const newOrderValues = {\r\n                    action,\r\n                    addressID,\r\n                    customerID,\r\n                    shipDateTime\r\n                }\r\n                const response = await fetch('/api/Orders', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(newOrderValues),\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                })\r\n                const responseJson = await response.json()\r\n                if (responseJson.request_received === \"success\") {\r\n                    alert(\"Successfully added the Order!\\nYou will now be redirected to the Orders Page.\")\r\n                    navigate(\"/Orders\")\r\n                } else {\r\n                    alert(\"Failed to add Order, please check the input and try again!\")\r\n                }\r\n            }\r\n            const answer = window.confirm(\"This will create a new Order with the entered values.\\nDo you wish to proceed?\")\r\n            if (answer) {\r\n                newOrder()  // the new data has already loaded into the component\r\n                    .catch(console.error)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <fieldset class=\"form\">\r\n            <legend><strong>Add a new Order</strong></legend>\r\n            <label>Customer ID:</label>\r\n            <br/>\r\n            <CustomerIDDynamicSelectAddComponent\r\n                customers={customers}\r\n                setCustomerID={setCustomerID}\r\n            />\r\n            <br/>\r\n            <label>Address ID:</label>\r\n                <br/>\r\n                <AddressIDDynamicSelectAddComponent\r\n                    addresses={addresses}\r\n                    setAddressID={setAddressID}\r\n                />\r\n            <br />\r\n            <br />\r\n            <button onClick={handleSubmit}>Submit</button>\r\n            <button onClick={handleReset}>Reset</button>\r\n            <Link to=\"/Orders\"><button>Cancel</button></Link>\r\n        </fieldset>\r\n    )\r\n}\r\n\r\n//<OrderSearchComponent/>","import React from 'react'\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function OrderDetailsRowComponent(\r\n    { orderDetails, setOrderDetailsToEdit }) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const odID = orderDetails.odID\r\n\r\n    const onUpdate = () => {\r\n        setOrderDetailsToEdit(orderDetails)\r\n        navigate(\"/OrderDetailsUpdate\")\r\n    }\r\n\r\n    const onDelete = () => {\r\n        const deleteOrderDetails = async () => {\r\n            const action = \"Delete\"\r\n\r\n            const newOrderDetailValues = {\r\n                action, odID\r\n            }\r\n            const response = await fetch('/api/OrderDetails', {\r\n                method: 'POST',\r\n                body: JSON.stringify(newOrderDetailValues),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            })\r\n            const responseJson = await response.json()\r\n            if (responseJson.request_received === \"success\") {\r\n                alert(\"Successfully deleted the OrderDetail!\\nThe page will now refresh.\")\r\n                window.location.reload()\r\n            } else {\r\n                alert(\"Failed to delete OrderDetail, please try again!\")\r\n            }\r\n        }\r\n        const answer = window.confirm(\"This will delete the selected OrderDetail.\\nDo you wish to proceed?\")\r\n        if (answer) {\r\n            deleteOrderDetails()\r\n                .catch(console.error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{orderDetails.odID}</td>\r\n            <td>{orderDetails.orderID}</td>\r\n            <td>{orderDetails.productID}</td>\r\n            <td>{orderDetails.productQuantity}</td>\r\n            <td>${orderDetails.unitPrice}</td>\r\n            <td>${orderDetails.lineTotal}</td>\r\n            <td>\r\n                <input type=\"button\" value=\"Update Order Details\" onClick={onUpdate}/>\r\n            </td>\r\n            <td>\r\n                <input type=\"button\" value=\"Delete\" onClick={onDelete}\r\n                />\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport OrderDetailsRowComponent from \"./OrderDetailsRowComponent\";\r\n\r\nexport default function OrderDetailsTableComponent(\r\n    { orderDetails, setOrderDetailsToEdit }) {\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Order Detail ID</th>\r\n                    <th>Order ID</th>\r\n                    <th>Product ID</th>\r\n                    <th>Product Quantity</th>\r\n                    <th>Unit Price</th>\r\n                    <th>Line Total</th>\r\n                    <th colSpan=\"2\">Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {orderDetails.map((orderDetails, i) =>\r\n                    <OrderDetailsRowComponent\r\n                    orderDetails={orderDetails}\r\n                        key={i}\r\n                        setOrderDetailsToEdit={setOrderDetailsToEdit}\r\n                    />)}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport OrderDetailsTableComponent from \"./OrderDetailsTableComponent\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function OrderDetailsBrowseComponent({ setOrderDetailsToEdit }) {\r\n\r\n    const [orderDetails, setOrderDetails] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getResponse = async () => {\r\n            const response = await fetch(\"/api/OrderDetails\")\r\n            const responseJson = await response.json()\r\n            setOrderDetails(responseJson)\r\n        }\r\n        getResponse()\r\n            .catch(console.error)\r\n    }, [])\r\n\r\n    return (\r\n        <fieldset>\r\n            <legend><strong>Browse OrderDetails</strong></legend>\r\n            <OrderDetailsTableComponent\r\n                orderDetails={orderDetails}\r\n                setOrderDetailsToEdit={setOrderDetailsToEdit}\r\n            />\r\n        </fieldset>\r\n    )\r\n}","import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\nimport OrderDetailsBrowseComponent from \"../../Components/OrderDetails/OrderDetailsBrowseComponent\";\r\n\r\nexport default function OrderDetails({setOrderDetailsToEdit}) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>OrderDetails</h2>\r\n            <Link to=\"/OrderDetailsAdd\"><button>Add Order Detail</button></Link>\r\n            <br/>\r\n            <br/>\r\n            <OrderDetailsBrowseComponent\r\n                setOrderDetailsToEdit={setOrderDetailsToEdit}/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nexport default function OrderDetails() {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [orderID, setOrderID] = useState('')\r\n    const [productID, setProductID] = useState('')\r\n    const [productQuantity, setProductQuantity] = useState('')\r\n    const [unitPrice, setUnitPrice] = useState('')\r\n\r\n\r\n    const handleReset = () => {\r\n        setOrderID('')\r\n        setProductID('')\r\n        setProductQuantity('')\r\n        setUnitPrice('')\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (orderID === '' || productID === '' || productQuantity === ''\r\n            || unitPrice === '') {\r\n            alert(\"Please enter values!\")\r\n        }\r\n        else {\r\n            const action = \"Add\"\r\n            const newOrderDetail = async () => {\r\n                const newOrderDetailValues = {\r\n                    action,\r\n                    orderID,\r\n                    productID,\r\n                    productQuantity,\r\n                    unitPrice\r\n                }\r\n                const response = await fetch('/api/OrderDetails', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(newOrderDetailValues),\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                })\r\n                const responseJson = await response.json()\r\n                if (responseJson.request_received === \"success\") {\r\n                    alert(\"Successfully added the OrderDetail!\\nYou will now be redirected to the OrderDetails Page.\")\r\n                    navigate(\"/OrderDetails\")\r\n                } else {\r\n                    alert(\"Failed to add OrderDetail, please check the input and try again!\")\r\n                }\r\n            }\r\n            const answer = window.confirm(\"This will create a new OrderDetail with the entered values.\\nDo you wish to proceed?\")\r\n            if (answer) {\r\n                newOrderDetail()\r\n                    .catch(console.error)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <fieldset class=\"form\">\r\n            <legend><strong>Add Order Details</strong></legend>\r\n            <label>Order ID:</label>\r\n            <input type=\"text\"\r\n                id=\"orderID\"\r\n                maxLength=\"100\"\r\n                value={orderID}\r\n                onChange={e => setOrderID(e.target.value)} />\r\n            <label>Product ID:</label>\r\n            <input type=\"text\"\r\n                id=\"productID\"\r\n                maxLength=\"1000\"\r\n                value={productID}\r\n                onChange={e => setProductID(e.target.value)} />\r\n            <br />\r\n            <label>Product Quantity:</label>\r\n            <br/>\r\n            <input type=\"number\"\r\n                id=\"productQuantity\"\r\n                min=\"0\"\r\n                max=\"10000\"\r\n                value={productQuantity && Math.max(0, productQuantity)}\r\n                onChange={e => setProductQuantity(e.target.value)} />\r\n            <br/>\r\n            <label>Unit Price:</label>\r\n            <br />\r\n            <input type=\"number\"\r\n                id=\"unitPrice\"\r\n                min=\"0\"\r\n                max=\"10000\"\r\n                value={unitPrice && Math.max(0, unitPrice)}\r\n                onChange={e => setUnitPrice(e.target.value)} />\r\n            <br />\r\n            <br />\r\n            <button onClick={handleSubmit}>Submit</button>\r\n            <button onClick={handleReset}>Reset</button>\r\n            <Link to=\"/OrderDetails\"><button>Cancel</button></Link>\r\n        </fieldset>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nexport default function OrderDetails({ orderDetailsToEdit }) {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [orderIDUpdate, setOrderIDUpdate] = useState(orderDetailsToEdit.orderID)\r\n    const [productIDUpdate, setProductIDUpdate] = useState(orderDetailsToEdit.productID)\r\n    const [productQuantityUpdate, setProductQuantityUpdate] = useState(orderDetailsToEdit.productQuantity)\r\n    const [unitPriceUpdate, setUnitPriceUpdate] = useState(orderDetailsToEdit.unitPrice)\r\n\r\n\r\n    const handleReset = () => {\r\n        setOrderIDUpdate(orderDetailsToEdit.orderID)\r\n        setProductIDUpdate(orderDetailsToEdit.productID)\r\n        setProductQuantityUpdate(orderDetailsToEdit.productQuantity)\r\n        setUnitPriceUpdate(orderDetailsToEdit.unitPrice)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (orderIDUpdate === '' || productIDUpdate === '' || productQuantityUpdate === ''\r\n            || unitPriceUpdate === '') {\r\n            alert(\"Please enter values!\")\r\n        }\r\n        else {\r\n            const action = \"Add\"\r\n            const orderID = orderDetailsToEdit.orderID\r\n            const newOrderDetail = async () => {\r\n                const newOrderDetailValues = {\r\n                    action,\r\n                    orderIDUpdate,\r\n                    productIDUpdate,\r\n                    productQuantityUpdate,\r\n                    unitPriceUpdate\r\n                }\r\n                const response = await fetch('/api/OrderDetails', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(newOrderDetailValues),\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                })\r\n                const responseJson = await response.json()\r\n                if (responseJson.request_received === \"success\") {\r\n                    alert(\"Successfully added the OrderDetail!\\nYou will now be redirected to the OrderDetails Page.\")\r\n                    navigate(\"/OrderDetails\")\r\n                } else {\r\n                    alert(\"Failed to add OrderDetail, please check the input and try again!\")\r\n                }\r\n            }\r\n            const answer = window.confirm(\"This will create a new OrderDetail with the entered values.\\nDo you wish to proceed?\")\r\n            if (answer) {\r\n                newOrderDetail()\r\n                    .catch(console.error)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <fieldset class=\"form\">\r\n            <legend><strong>Update Order Details</strong></legend>\r\n            <label>Order ID:</label>\r\n            <input type=\"text\"\r\n                id=\"orderID\"\r\n                value={orderDetailsToEdit.orderID} disabled />\r\n            <label>Product ID:</label>\r\n            <input type=\"text\"\r\n                id=\"productID\"\r\n                maxLength=\"1000\"\r\n                value={productIDUpdate}\r\n                onChange={e => setProductIDUpdate(e.target.value)} />\r\n            <br />\r\n            <label>Product Quantity:</label>\r\n            <br />\r\n            <input type=\"number\"\r\n                id=\"productQuantity\"\r\n                min=\"0\"\r\n                max=\"10000\"\r\n                value={productQuantityUpdate && Math.max(0, productQuantityUpdate)}\r\n                onChange={e => setProductQuantityUpdate(e.target.value)} />\r\n            <br />\r\n            <label>Unit Price:</label>\r\n            <br />\r\n            <input type=\"number\"\r\n                id=\"unitPrice\"\r\n                min=\"0\"\r\n                max=\"10000\"\r\n                value={unitPriceUpdate && Math.max(0, unitPriceUpdate)}\r\n                onChange={e => setUnitPriceUpdate(e.target.value)} />\r\n            <br />\r\n            <br />\r\n            <button onClick={handleSubmit}>Submit</button>\r\n            <button onClick={handleReset}>Reset</button>\r\n            <Link to=\"/OrderDetails\"><button>Cancel</button></Link>\r\n        </fieldset>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport './App.css'\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport { useState} from \"react\";\r\nimport HeaderComponent from \"./Components/Header-Footer/HeaderComponent\";\r\nimport Home from \"./Pages/Home\";\r\nimport Customers from \"./Pages/Customers/Customers\";\r\nimport Addresses from \"./Pages/Addresses/Addresses\";\r\nimport Orders from \"./Pages/Orders/Orders\";\r\nimport Products from \"./Pages/Products/Products\";\r\nimport ProductsAdd from \"./Pages/Products/ProductsAdd\";\r\nimport ProductsUpdate from \"./Pages/Products/ProductsUpdate\";\r\nimport FooterComponent from \"./Components/Header-Footer/FooterComponent\";\r\nimport AddressesAdd from \"./Pages/Addresses/AddressesAdd\";\r\nimport AddressesUpdate from \"./Pages/Addresses/AddressesUpdate\";\r\nimport CustomersAdd from \"./Pages/Customers/CustomersAdd\";\r\nimport CustomersUpdate from \"./Pages/Customers/CustomersUpdate\";\r\nimport OrdersAdd from \"./Pages/Orders/OrdersAdd\";\r\nimport OrderDetails from \"./Pages/OrderDetails/OrderDetails\";\r\nimport OrderDetailsAdd from \"./Pages/OrderDetails/OrderDetailsAdd\";\r\nimport OrderDetailsUpdate from \"./Pages/OrderDetails/OrderDetailsUpdate\";\r\n\r\n\r\nexport default function App() {\r\n\r\n\tconst [productToEdit, setProductToEdit] = useState(\"\");\r\n\tconst [addressToEdit, setAddressToEdit] = useState(\"\");\r\n\tconst [customerToEdit, setCustomerToEdit] = useState(\"\");\r\n\tconst [orderToEdit, setOrderToEdit] = useState(\"\");\r\n\tconst [orderDetailsToEdit, setOrderDetailsToEdit] = useState(\"\");\r\n\tconst [products, setProducts] = useState([])\r\n\tconst [addresses, setAddresses] = useState([])\r\n\tconst [customers, setCustomers] = useState([])\r\n\tconst [orders, setOrders] = useState([])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<BrowserRouter>\r\n\t\t\t\t<HeaderComponent />\r\n\t\t\t\t<Routes>\r\n\t\t\t\t\t<Route path=\"/\" element={<Home />} />\r\n\r\n\t\t\t\t\t<Route path=\"/Products\" element={<Products\r\n\t\t\t\t\t\tproducts={products}\r\n\t\t\t\t\t\tsetProducts={setProducts}\r\n\t\t\t\t\t\tsetProductToEdit={setProductToEdit} />} />\r\n\t\t\t\t\t<Route path=\"/ProductsAdd\" element={<ProductsAdd/>} />\r\n\t\t\t\t\t<Route path=\"/ProductsUpdate\" element={<ProductsUpdate\r\n\t\t\t\t\t\tproductToEdit={productToEdit}\r\n\t\t\t\t\t/>} />\r\n\r\n\t\t\t\t\t<Route path=\"/Addresses\" element={<Addresses\r\n\t\t\t\t\t\taddresses={addresses}\r\n\t\t\t\t\t\tsetAddresses={setAddresses}\r\n\t\t\t\t\t\tsetAddressToEdit={setAddressToEdit} />} />\r\n\t\t\t\t\t<Route path=\"/AddressesAdd\" element={<AddressesAdd\r\n\t\t\t\t\t\tcustomers={customers}\r\n\t\t\t\t\t\tsetCustomers={setCustomers}\r\n\t\t\t\t\t/>} />\r\n\t\t\t\t\t<Route path=\"/AddressesUpdate\" element={<AddressesUpdate\r\n\t\t\t\t\t\taddressToEdit={addressToEdit} />} />\r\n\r\n\t\t\t\t\t<Route path=\"/Customers\" element={<Customers\r\n\t\t\t\t\t\tcustomers={customers}\r\n\t\t\t\t\t\tsetCustomers={setCustomers}\r\n\t\t\t\t\t\tsetCustomerToEdit={setCustomerToEdit} />} />\r\n\t\t\t\t\t<Route path=\"/CustomersAdd\" element={<CustomersAdd/>} />\r\n\t\t\t\t\t<Route path=\"/CustomersUpdate\" element={<CustomersUpdate\r\n\t\t\t\t\t\tcustomerToEdit={customerToEdit} />} />\r\n\r\n\t\t\t\t\t<Route path=\"/Orders\" element={<Orders\r\n\t\t\t\t\t\torders={orders}\r\n\t\t\t\t\t\tsetOrders={setOrders}\r\n\t\t\t\t\t\tsetOrderToEdit={setOrderToEdit} />} />\r\n\t\t\t\t\t<Route path=\"/OrdersAdd\" element={<OrdersAdd\r\n\t\t\t\t\t\taddresses={addresses}\r\n\t\t\t\t\t\tsetAddresses={setAddresses}\r\n\t\t\t\t\t\tcustomers={customers}\r\n\t\t\t\t\t\tsetCustomers={setCustomers}/>} />\r\n\r\n\r\n\r\n\t\t\t\t\t<Route path=\"/OrderDetails\" element={<OrderDetails\r\n\t\t\t\t\t\torderDetailsToEdit={orderDetailsToEdit}\r\n\t\t\t\t\t\tsetOrderDetailsToEdit={setOrderDetailsToEdit} />} />\r\n\t\t\t\t\t<Route path=\"/OrderDetailsAdd\" element={<OrderDetailsAdd />} />\r\n\t\t\t\t\t<Route path=\"/OrderDetailsUpdate\" element={<OrderDetailsUpdate\r\n\t\t\t\t\t\torderDetailsToEdit={orderDetailsToEdit} />} />\r\n\t\t\t\t</Routes>\r\n\t\t\t\t<FooterComponent />\r\n\t\t\t</BrowserRouter>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}